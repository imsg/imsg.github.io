<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 翻译 | I'm Anson]]></title>
  <link href="http://imsg.github.io/blog/categories/fan-yi/atom.xml" rel="self"/>
  <link href="http://imsg.github.io/"/>
  <updated>2013-12-22T21:54:16+08:00</updated>
  <id>http://imsg.github.io/</id>
  <author>
    <name><![CDATA[Anson Zhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[值对象]]></title>
    <link href="http://imsg.github.io/blog/2013/12/21/value-objects/"/>
    <updated>2013-12-21T13:45:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/12/21/value-objects</id>
    <content type="html"><![CDATA[<p>翻译自<a href="http://www.objc.io/issue-7/value-objects.html">Value Objects</a></p>

<p>在这篇文章中，我们将看看如何用Objective-C语言编写值对象。在编写时，我们将会接触到Objective-C中的重要协议和方法。一个值对象是一个包含一些值的对象，并且可以进行相等比较。通常值对象可以被用作模型对象。例如，考虑一个简单的<em>Person</em>对象：</p>

<!--more-->


<p>```objc
@interface Person : NSObject</p>

<p>@property (nonatomic,copy) NSString<em> name;
@property (nonatomic,strong) NSDate</em> birthDate;
@property (nonatomic) NSUInteger numberOfKids;</p>

<p>@end
```
创建这些类型的对象是我们工作的面包和黄油（译者注：基本元素），虽然这些对象看上去很简单，但是仍然包含许多微妙之处。</p>

<p>有一件事，我们很多人硬性的认为这些对象应该是一成不变的。一旦你创建了一个<em>Person</em>对象，它不可能被改变。我们将在稍后涉及到可变性这个问题。</p>

<h1>属性</h1>

<p>首先要注意的是我们使用属性来定义一个<em>Person</em>的特征。创建属性是想当机械的：对于普通对象的属性，你设置它们为<code>nonatomic</code>和<code>strong</code>，而对于标量属性你只需要设置<code>nonatomic</code>。默认情况下，它们也是<code>assign</code>。有一个例外，对于具有可变副本的属性，你想将他们定义为<code>copy</code>。例如，name属性的类型是<code>NSString</code>，有可能出现的情况是，有人创建了一个<em>Person</em>对象，并指定类型为<code>NSMutableString</code>的值。然后一段时间后，他或她可能会改变这个可变的字符串。如果我们的属性是<code>strong</code>而不是<code>copy</code>，我们的<em>Person</em>对象会随之改变，这不是我们想要的。对于容器类型也是一样的，例如数组或者字典。</p>

<p>请注意，这个拷贝是浅拷贝，容器可能还包含可变对象。例如，如果你有一个<code>NSMutableArray *a</code>包含有<code>NSMutableDictionary</code>元素，则<code>[a copy]</code>将会给你一个不可变数组，但是元素是相同的<code>NSMutableDictionary</code>对象。正如我们稍后将看到的，不可变对象的拷贝是无成本的，但是它增加了引用计数。</p>

<p>在旧的代码中，你可能看不到属性，因为他们是相对近期才加入到Objective-C语言的。代替现有属性，有可能会看到自定义的getter和setter方法，或纯实例变量。对于现在的代码，似乎似乎大多数人都同意使用属性，这也是我们所推荐的。</p>

<h3>更多阅读</h3>

<p><a href="http://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain">NSString:copy or retian</a></p>

<h1>初始化方法</h1>

<p>如果我们想要不可变对象，我们应该确保他们被创建后不能进行修改。我们可以通过添加一个初始化方法和在接口里使我们的属性只读来做到这一点。我们的接口将如下所示：</p>

<p>```objc
@interface Person : NSObject</p>

<p>@property (nonatomic,copy,readonly) NSString<em> name;
@property (nonatomic,strong,readonly) NSDate</em> birthDate;
@property (nonatomic,readonly) NSUInteger numberOfKids;</p>

<ul>
<li>(instancetype)initWithName:(NSString<em>)name
                 birthDate:(NSDate</em>)birthDate
              numberOfKids:(NSUInteger)numberOfKids;</li>
</ul>


<p>@end
```</p>

<p>然后，在我们的实现中，我们必须使我们的属性<code>readwrite</code>，从而生成实例变量：</p>

<p>```objc
@interface Person ()</p>

<p>@property (nonatomic,copy) NSString<em> name;
@property (nonatomic,strong) NSDate</em> birthDate;
@property (nonatomic) NSUInteger numberOfKids;</p>

<p>@end</p>

<p>@implementation Person</p>

<ul>
<li>(instancetype)initWithName:(NSString<em>)name
                 birthDate:(NSDate</em>)birthDate
              numberOfKids:(NSUInteger)numberOfKids
{
  self = [super init];
  if (self) {
      self.name = name;
      self.birthDate = birthDate;
      self.numberOfKids = numberOfKids;
  }
  return self;
}</li>
</ul>


<p>@end
```</p>

<p>现在我们可以构造新的<em>Person</em>对象，但不能修改它们了。这是非常有帮助的，当编写与<em>Person</em>对象工作的其他类时，我们知道我们正在工作的值不能改变。</p>

<h1>相等比较</h1>

<p>要比较是否相等，我们必须实现<code>isEqual:</code>方法。我们希望<code>isEqual:</code>返回true当且仅当所有的属性都相等。由Mike Ash（<a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">实现相等和散列</a>）和NSHipster（<a href="http://nshipster.com/equality/">相等</a>）写的两篇很好的文章解释了如何做到这点。首先，让我们写<code>isEqual:</code>：</p>

<p>```objc
&ndash; (BOOL)isEqual:(id)obj
{</p>

<pre><code>if(![obj isKindOfClass:[Person class]]) return NO;

Person* other = (Person*)obj;

BOOL nameIsEqual = self.name == other.name || [self.name isEqual:other.name];
BOOL birthDateIsEqual = self.birthDate == other.birthDate || [self.birthDate isEqual:other.birthDate];
BOOL numberOfKidsIsEqual = self.numberOfKids == other.numberOfKids;
return nameIsEqual &amp;&amp; birthDateIsEqual &amp;&amp; numberOfKidsIsEqual;
</code></pre>

<p>}
```</p>

<p>现在，我们检查是否我们是相同类型的类。如果不是，我们肯定不相等。然后对每个对象的属性，我们检查是否指针是相等的。||左侧的运算数似乎是多余的，但如果两个属性都为<code>nil</code>则返回<code>YES</code>。为了比较标量值相等像<code>NSUInteger</code>，我们可以只使用<code>==</code>。</p>

<p>有一件事值得注意：这里我们分成不同的属性到他们自己的布尔值里。在实践中，可能将它们合成一个大的条件更有意义，因为这样你直接得到惰性求值。在上面的例子中，如果名字不相等，我们就不需要检查任何其他的属性。通过把所有组合成一个if语句，我们直接得到优化。</p>

<p>下一步，按照<a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/foundation/Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/isEqual:">这个文档</a>，我们需要实现一个哈希函数也是如此。Apple说：</p>

<blockquote><p>如果两个对象相等，他们必须有相同的哈希值。如果你在子类中定义了<code>isEqual:</code>，并且打算把该子类的实例放入集合中，这最后一点就特别重要了。请确保你在你的子类中也定义了哈希。</p></blockquote>

<p>首先，我们可以尝试运行下面没有实现哈希函数的代码：</p>

<p><code>objc
Person* p1 = [[Person alloc] initWithName:name birthDate:start numberOfKids:0];
Person* p2 = [[Person alloc] initWithName:name birthDate:start numberOfKids:0];
NSDictionary* dict = @{p1: @"one", p2: @"two"};
NSLog(@"%@", dict);
</code></p>

<p>我第一次跑了上面的代码，一切都很好，在字典中有两个项目。第二次，只有一个了。事情变得非常不可预测了，所以我们照着文档说的来做了。</p>

<p>正如你可能还记得您的计算机科学课程中，写一个好的哈希函数不是很容易的。一个好的哈希函数必须是确定性的和均匀的。确定性意味着，在相同的输入下需要生成相同的哈希值。均匀表示哈希函数的结果应该均匀地将输入映射在输出范围内。你的输出越均匀，你在集合中使用这些对象的性能越好。</p>

<p>首先，为了弄清楚，让我们来看看当我们没有一个哈希函数发生了什么，我们尝试使用<em>Person</em>对象作为字典的键：</p>

<p>```objc
NSMutableDictionary* dictionary = [NSMutableDictionary dictionary];</p>

<p>NSDate* start = [NSDate date];
for (int i = 0; i &lt; 50000; i++) {</p>

<pre><code>NSString* name = randomString();
Person* p = [[Person alloc] initWithName:name birthDate:[NSDate date] numberOfKids:i++];
[dictionary setObject:@"value" forKey:p];
</code></pre>

<p>}
NSLog(@&ldquo;%f&rdquo;, [[NSDate date] timeIntervalSinceDate:start]);
```</p>

<p>这在我的机器上运行需要29秒。相比之下，当我们实现一个基本的哈希函数，相同的代码运行只需要0.4秒。这不是合适的基准，但也给出了一个好的迹象，为什么要实现一个适当的哈希函数是很重要的。 对于<em>Person</em>类，我们可以用这样的哈希函数开始：</p>

<p>```objc
&ndash; (NSUInteger)hash
{</p>

<pre><code>return self.name.hash ^ self.birthDate.hash ^ self.numberOfKids;
</code></pre>

<p>}
```</p>

<p>这将从我们的属性中产生三个哈希值并且XOR他们。在这种情况下，对我们来说已经足够了，因为NSString的哈希函数对于短字符串来说很好（过去表现良好的字符串<a href="http://www.abakia.de/blog/2012/12/05/nsstring-hash-is-bad/">最多96个字符</a>，但是现在已经改变了。见<a href="http://www.opensource.apple.com/source/CF/CF-855.11/CFString.c">CFString.c</a>，寻找哈希）。对于严重的散列，你的哈希函数取决于你拥有的数据。这被<a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">Mike Ash的文章</a>和<a href="http://www.burtleburtle.net/bob/hash/spooky.html">其他地方</a>所提及。</p>

<p>在哈希的<a href="https://developer.apple.com/library/mac/documentation/cocoa/Reference/Foundation/Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/hash">文档</a>里，有如下的段落：</p>

<blockquote><p>如果一个可变对象被添加到使用哈希值来确定集合中对象位置的集合中，当对象在集合中，对象的哈希方法返回的值必须不能改变。因此，无论是哈希方法必须不依赖于任何对象的内部状态信息，还是当对象在集合中你必须确保该对象的内部状态信息不会改变。因此，例如，一个可变字典可以放入一个哈希表中，但是当它在那里你不能改变它。（请注意，可能很难知道给定的对象是否在一个集合中。）</p></blockquote>

<p>这是为了确保你的对象是不可变的另一个非常重要的原因。然后，你甚至不必担心这个问题了。</p>

<h3>更多阅读</h3>

<ul>
<li><a href="https://gist.github.com/steipete/6133152">A hash function for CGRect</a></li>
<li><a href="http://www.burtleburtle.net/bob/hash/doobs.html">A Hash Function for Hash Table Lookup</a></li>
<li><a href="http://www.burtleburtle.net/bob/hash/spooky.html">SpookyHash: a 128-bit noncryptographic hash</a></li>
<li><a href="http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/">Why do hash functions use prime numbers?</a></li>
</ul>


<h1>NSCopying</h1>

<p>为了确保我们的对象是有用的，可以方便的实现<code>NSCopying</code>协议。让我们举例来说，在容器类中使用它们。对于我们类中的一个可变的变量，<code>NSCopying</code>可以被这样实现：</p>

<p>```objc
&ndash; (id)copyWithZone:(NSZone *)zone
{</p>

<pre><code>Person* p = [[Person allocWithZone:zone] initWithName:self.name
                                            birthDate:self.birthDate
                                         numberOfKids:self.numberOfKids];
return p;
</code></pre>

<p>}
```</p>

<p>然而，在协议文档中，他们提到另一种方式来实现<code>NSCopying</code>：</p>

<blockquote><p>当类和它的内容是不可变的，通过保留原有的实现NSCopying，而不是穿件一个新的副本。</p></blockquote>

<p>因此，对于我们不可变的版本，我们只要这样做：</p>

<p>```objc
&ndash; (id)copyWithZone:(NSZone *)zone
{</p>

<pre><code>return self;
</code></pre>

<p>}
```</p>

<h1>NSCoding</h1>

<p>如果我们要序列化我们的对象，我们可以通过实现<code>NSCoding</code>来做到这一点。该协议存在两个必需的方法：</p>

<p><code>objc
- (id)initWithCoder:(NSCoder *)decoder
- (void)encodeWithCoder:(NSCoder *)encoder
</code></p>

<p>实现这个和实现相等方法同样简单，也比较机械：</p>

<p>```objc
&ndash; (id)initWithCoder:(NSCoder *)aDecoder
{</p>

<pre><code>self = [super init];
if (self) {
    self.name = [aDecoder decodeObjectForKey:@"name"];
    self.birthDate = [aDecoder decodeObjectForKey:@"birthDate"];
    self.numberOfKids = [aDecoder decodeIntegerForKey:@"numberOfKids"];
}
return self;
</code></pre>

<p>}</p>

<ul>
<li>(void)encodeWithCoder:(NSCoder *)aCoder
{
  [aCoder encodeObject:self.name forKey:@&ldquo;name&rdquo;];
  [aCoder encodeObject:self.birthDate forKey:@&ldquo;birthDate&rdquo;];
  [aCoder encodeInteger:self.numberOfKids forKey:@&ldquo;numberOfKids&rdquo;];
}
```</li>
</ul>


<p>关于它可以从<a href="http://nshipster.com/nscoding/">NSHipster</a>和<a href="http://www.mikeash.com/pyblog/friday-qa-2013-08-30-model-serialization-with-property-lists.html">Mike Ash的博客</a>中阅读更多。顺便说一句，当处理不受信任的来源，如数据来自网络，不要使用<code>NSCoding</code>。因为数据可能被篡改。通过<a href="https://developer.apple.com/library/mac/documentation/security/conceptual/securecodingguide/Articles/ValidatingInput.html#//apple_ref/doc/uid/TP40007246-SW9">修改存档的数据</a>，它很可能要执行远程代码进行攻击。取而代之，使用<a href="http://nshipster.com/nssecurecoding/">NSSecureCoding</a>或像JSON的自定义格式。</p>

<h1>Mantle</h1>

<p>现在我们留下了一个问题：我们可以自动化它吗？事实证明，我们可以做到。一种方法是代码生成，但幸运的是有一个更好的选择：<a href="https://github.com/github/Mantle">Mantle</a>。Mantle使用内省(introspection)来产生<code>isEqual:</code>和哈希。此外，它提供了一些方法来帮助你创建字典，然后可以用于写入和读取JSON。当然，一般运行时这样做将不会像自己写的代码一样有效率，但在另一方面，自动执行是一个更不容易出错的过程。</p>

<h1>可变性</h1>

<p>在C语言和Objective-C语言中，可变的值是默认值。在某种程度上，它们是非常方便的，因为你可以在任何时候改变任何东西。当建立较小的系统，这应该是没有问题的。然而，正如我们许多人了解的方法，建立规模更大的系统时，事情是不可变时会相当容易。在Objective-C中，我们已经使用不可变对象很长时间了，并且现在其他语言也开始添加。</p>

<p>我们来看看可变对象的两个问题。一个是当你不希望它改变时它们可能会改变，另一个是在多线程环境中使用可变对象。</p>

<h2>意想不到的变化</h2>

<p>假设我们有一个表视图控制器，其中有一个<em>People</em>属性：</p>

<p>```objc
@interface ViewController : UITableViewController</p>

<p>@property (nonatomic, strong) NSArray* people;</p>

<p>@end
```</p>

<p>而在我们的实现里，我们只是映射每个数组元素到一个单元格：</p>

<p>```objc
&ndash; (NSInteger)numberOfSectionsInTableView:(UITableView*)tableView
{</p>

<pre><code>return 1;
</code></pre>

<p>}</p>

<ul>
<li>(NSInteger)tableView:(UITableView*)tableView numberOfRowsInSection:(NSInteger)section
{
  return self.people.count;
}
```</li>
</ul>


<p>现在，在设置了以上视图控制器的代码中，我们可能有这样的代码：</p>

<p><code>objc
self.items = [NSMutableArray array];
[self loadItems]; // Add 100 items to the array
tableVC.people = self.items;
[self.navigationController pushViewController:tableVC animated:YES];
</code></p>

<p>表视图将开始调用方法，如<code>tableView:numberOfRowsInSection:</code>，开始一切都很好，但是假设在某些时候，我们执行以下操作：</p>

<p><code>objc
[self.items removeObjectAtIndex:1];
</code></p>

<p>这改变了我们的<em>items</em>数组，但是它也改变了我们表视图控制器里的<em>People</em>数组。如果我们这样做而没有和表视图控制器有任何进一步的沟通，表视图将仍然认为有100个项目，而我们的数组只包含99个。不好的事情将会发生。取而代之，我们应该做的是以<code>copy</code>声明我们的属性：</p>

<p>```objc
 @interface ViewController : UITableViewController</p>

<p> @property (nonatomic, copy) NSArray* items;</p>

<p> @end
```</p>

<p>现在，无论什么时候我们分配一个可变的数组给<em>items</em>，一个不可变的副本将会创建。如果我们分配一个常规（不可变）的数组的值，拷贝操作是无害的，它仅仅增加了引用计数。</p>

<h2>多线程</h2>

<p>假设我们有一个可变对象，<em>Account</em>，代表一个银行账户，它有一个方法<code>transfer:to:</code>：</p>

<p>```objc
&ndash; (void)transfer:(double)amount to:(Account*)otherAccount
{</p>

<pre><code>self.balance = self.balance - amount;
otherAccount.balance = otherAccount.balance + amount;
</code></pre>

<p>}
```</p>

<p>多线程的代码可以在许多方面产生错误。例如，如果线程A读取<code>self.balance</code>，线程B可能会在线程A继续之前修改它。对于所有涉及到的危险的一个很好的解释，请参阅我们的<a href="http://www.objc.io/issue-2/">第二个问题</a>。</p>

<p>如果我们将它替换为不可变对象，事情就容易多了。我们不能对其进行修改，这迫使我们在一个完全不同的层次上提供可变性，产生更简单的代码。</p>

<h2>缓存</h2>

<p>另一件事，不可变性可以帮助的是在缓存值的时候。例如，假设你已经解析了一个markdown文档为一个包含所有不同元素节点的树形结构。如果你想生成的另外的HTML，你可以缓存这个值，因为你知道没有任何子节点会改变。如果你有可变对象，你则需要每次从零开始生成HTML，或构建优化并观察每一个单独的对象。和不变性相比，你不必担心无效的缓存。当然，这可能会带来性能损失。在几乎所有情况下，然而，简单将超过在性能上的略有下降。</p>

<h2>在其他语言里的不可变性</h2>

<p>不可变对象是灵感来自于像<a href="http://www.haskell.org/">Haskell</a>的函数式编程语言的概念之一。在Haskell中，值默认是不可变的。Haskell程序通常有一个<a href="http://en.wikipedia.org/wiki/Purely_functional">单纯功能</a>的核心，里面没有可变对象，没有状态，而且没有副作用，像I/O。</p>

<p>我们可以在Objective-C编程中借鉴这个。在可能的情况下使用不可变对象，我们的项目将变得更容易测试。<a href="https://www.destroyallsoftware.com/talks/boundaries">Gary Bernhardt有一个很棒的讨论</a>，显示了如何使用不可变对象来帮助我们写出更好的软件。在这个讨论中，他使用的是Ruby，但是其概念也同样适用于Objective-C语言。</p>

<h3>进一步阅读</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/CocoaEncyclopedia/ObjectMutability/ObjectMutability.html#//apple_ref/doc/uid/TP40010810-CH5-SW1">Cocoa Encyclopedia: Object Mutability</a></li>
<li><a href="http://garbagecollective.quora.com/Mutability-aliasing-and-the-caches-you-didnt-know-you-had">Mutability and Caching</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread-Safe Class Design]]></title>
    <link href="http://imsg.github.io/blog/2013/11/28/thread-safe-class-design/"/>
    <updated>2013-11-28T22:39:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/28/thread-safe-class-design</id>
    <content type="html"><![CDATA[<p>翻译自<a href="http://www.objc.io/issue-2/thread-safe-class-design.html">Thread-Safe Class Design</a></p>

<h1>线程安全类的设计</h1>

<p>此文章将侧重于编写线程安全类和使用Grand Central Displatch(GCD)时的实用的技巧，设计模式，以及反模式。</p>

<h1>线程安全</h1>

<h3>Apple的框架</h3>

<p>首先让我们来看一下Apple的框架。一般情况下，除非提前声明，否则大多数类默认不是线程安全的。一些是我们所期望的，但是另一些却会相当有趣。</p>

<p>其中甚至有经验的iOS/Mac开发人员常会犯的错误是在后台线程中访问部分UIKit/AppKit。最容易犯的错误是在后台线程中对property赋值，比如图片，因为他们的内容是在后台从网络上获取的。Apple的代码是性能优化过的，如果你从不同线程去改动property，它是不会警告你的。</p>

<p>例如图片这种情况，一个常见的问题是你的改动会产生延迟。但是如果两个线程同时设置图片，很可能你的程序将直接崩溃，因为当前设置的图片可能会被释放两次。由于这是和时机相关的，因此崩溃通常发生在客户使用时，而并不是在开发过程中。</p>

<p>虽然没有官方的工具来发现这样的错误，但是有一些技巧可以避免这种错误发生。<a href="https://gist.github.com/steipete/5664345">The UIKit Main Thread Guard</a>是一小段代码，可以修补任何调用UIView的setNeedsLayout和setNeedsDisplay，以及在发送调用之前检查是否执行在主线程。由于这两种方法被许多UIKit的setters方法调用（包括图片），这将会捕获许多线程相关的错误。虽然这个不使用私有API，但是我们不建议在产品程序中使用，而是最好在开发过程是使用。</p>

<p>UIKit非线程安全是Apple有意的设计决定。从性能方面来说线程安全没有太多好处，它实际上会使很多事情变慢。而事实上UIKit和主线程捆绑使它很容易编写并发程序和使用UIKit。你所需要做的就是确保总是在主线程上调用UIKit。</p>

<!--more-->


<h3>为什么UIKit不是线程安全的？</h3>

<p>像UIKit这样大的框架上确保线程安全是一个重大的任务，会带来巨大的成本。改变非原子property为原子property只是所需要改变的一小部分。通常你想要一次改变多个property，然后才能看到更改的结果。对于这一点，Apple不得不暴露一个方法，像CoreData的<code>performBlock:</code>和同步的方法<code>performBlockAndWait:</code>。如果你考虑大多数调用UIKit类是有关配置(configuration)，使他们线程安全更没有意义。</p>

<p>然而，即使调用不是关于配置(configuration)来共享内部状态，因此它们不是线程安全的。如果你已经写回到黑暗时代iOS3.2及以前的应用程序，你一定经历过当准备背景图像时使用<code>NSString</code>的<code>drawInRect:withFont:</code>随时崩溃。值得庆幸的是随着iOS4的到来，Apple提供了大部分绘图的方法和类，例如<code>UIColor</code>和<code>UIFont</code>在后台线程中的使用。</p>

<p>不幸的是，Apple的文档目前还缺乏有关线程安全的主题。他们建议只在主线程访问，甚至连绘画方法他们都不能保证线程安全。所以阅读iOS的版本说明总是一个好主意。</p>

<p>在大多数情况下，UIKit类只应该在程序的主线程使用。无论是从<code>UIResponder</code>派生的类，还是那些涉及以任何方式操作你的应用程序的用户界面。</p>

<h3>解除分配问题</h3>

<p>另一个在后台使用UIKit对象的风险是“解除分配问题”。Apple在TN2109里概括了这个问题，并提出了多种解决方案。这个问题是UI对象应该在主线程中释放，因为一部分对象有可能在dealloc中对视图层次结构进行更改。正如我们所知，这种对UIKit的调用需要发生在主线程上。</p>

<p>由于它常见于次线程，操作或块保留调用者，这很容易出错，并且很难找到并修复。这也是在AFNetworking中长期存在的一个bug，只是因为不是很多人知道这个问题，照例，显然它很罕见，并且很难重现崩溃。在异步块操作里一贯使用<code>__weak</code>和不访问ivars会有所帮助。</p>

<h3>集合类</h3>

<p>Apple有一个很好的概述文档，对iOS和Mac上列出线程安全最常见的基础类。一般情况下，不可变类，像NSArray是线程安全的，而它们的可变的变体，像NSMutableArray则不是。事实上，当在一个队列中序列化的访问时，是可以在不同线程中使用它们的。请记住，方法可能返回一个集合对象的可变变体，即使它们生命它们的返回类型是不可变的。好的做法是写一些像<code>return [array copy]</code>来确保返回的对象实际上是不可变的。</p>

<p>不同于像Java语言，Foundation框架不提供框架外的线程安全的集合类。其实这是非常合理的，因为在大多数情况下，你想在更高层使用你的锁去避免过多的锁操作。一个值得注意的例外是缓存，其中一个可变的字典可能会保存不变的数据-在这里Apple在iOS4中增加了NSCache，它不仅能锁定访问，还可以在低内存情况下清除它的内容。</p>

<p>这就是说，在你的程序中，这也许是有效的情况，其中一个线程安全的可变的字典可以很轻便的。而这要归功于类簇(class cluster)的解决方案，它可以很容易的写一个。</p>

<h1>原子属性(properties)</h1>

<p>有没有想过Apple如何处理原子设置/获取属性？现在你可能已经听说过spinlocks, semaphores, locks, @synchronized &ndash; 那Apple使用什么？幸运的是，Objective-C运行是公开的，所以我们可以看看幕后发生了什么。</p>

<p>一个非原子属性的setter方法可能看起来像这样：</p>

<p>```objc
&ndash; (void)setUserName:(NSString *)userName {</p>

<pre><code>  if (userName != _userName) {
      [userName retain];
      [_userName release];
      _userName = userName;
  }
</code></pre>

<p>}
```</p>

<p>这是手动retain/release变量，然而用ARC生成的代码看起来类似。让我们看看这段代码，很显然当<code>setUserName:</code>被同时调用就遇到了麻烦。我们最终可能会释放<code>_userName</code>两次，这会破坏内存，并且导致难以发现的bug。</p>

<p>对于任意一个非手工实现的property内部发生的是，编译器生成一个调用<code>objc_setProperty_non_gc(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy)</code>。在我们的例子中，调用参数是这样的：</p>

<p><code>objc
objc_setProperty_non_gc(self, _cmd,
  (ptrdiff_t)(&amp;_userName) - (ptrdiff_t)(self), userName, NO, NO);
</code></p>

<p><code>ptrdiff_t</code>你可能看起来很怪异，但最终它是一个简单的指针算法，因为一个Objective-C类正是另一个C结构。</p>

<p><code>objc_setProperty</code>调用下面的方法：</p>

<p>```objc
static inline void reallySetProperty(id self, SEL _cmd, id newValue,
  ptrdiff_t offset, bool atomic, bool copy, bool mutableCopy)
{</p>

<pre><code>id oldValue;
id *slot = (id*) ((char*)self + offset);

if (copy) {
    newValue = [newValue copyWithZone:NULL];
} else if (mutableCopy) {
    newValue = [newValue mutableCopyWithZone:NULL];
} else {
    if (*slot == newValue) return;
    newValue = objc_retain(newValue);
}

if (!atomic) {
    oldValue = *slot;
    *slot = newValue;
} else {
    spin_lock_t *slotlock = &amp;PropertyLocks[GOODHASH(slot)];
    _spin_lock(slotlock);
    oldValue = *slot;
    *slot = newValue;        
    _spin_unlock(slotlock);
}

objc_release(oldValue);
</code></pre>

<p>}
```</p>

<p>除了相当有趣的名字，这种方法其实是相当简单，并使用128个在PropertyLocks可用的spinlocks其中之一。这是一个务实的和快速的解决方案 &ndash; 最坏的情况是，因为一个哈希冲突，一个setter不得不等待一个不相关的setter结束。</p>

<p>虽然这些方法在任何公共头文件都没有声明，但可以手动调用它们。我并不是说这是一个好主意，但如果你想要原子属性和想要同时实现setter，知道这些是很有趣的并且可能会相当有用。</p>

<p>```objc
// Manually declare runtime methods.
extern void objc_setProperty(id self, SEL <em>cmd, ptrdiff_t offset,
  id newValue, BOOL atomic, BOOL shouldCopy);
extern id objc_getProperty(id self, SEL </em>cmd, ptrdiff_t offset,
  BOOL atomic);</p>

<h1>define PSTAtomicRetainedSet(dest, src) objc_setProperty(self, _cmd,</h1>

<p>  (ptrdiff_t)(&amp;dest) &ndash; (ptrdiff_t)(self), src, YES, NO)</p>

<h1>define PSTAtomicAutoreleasedGet(src) objc_getProperty(self, _cmd,</h1>

<p>  (ptrdiff_t)(&amp;src) &ndash; (ptrdiff_t)(self), YES)
```</p>

<p><a href="https://gist.github.com/steipete/5928690">参考这个gist</a>全部片段包括处理结构的代码。但是请记住我们不建议使用这个。</p>

<h3>@synchronized如何？</h3>

<p>你可能很好奇为什么Apple不使用一个已有的运行时特性<code>@synchronized(self)</code>来做属性锁。一旦你看了源代码，你将明白这还有很多事要做。Apple采用最多三个上锁/解锁序列，部分原因是他们还增加了异常展开(exception unwinding)。比起更加快速的spinlock方案，这个会慢一些。由于设置属性通常是相当快的，spinlocks是最完美的选择。当你需要确保没有代码死锁而抛出异常，<code>@synchronized(self)</code>是个好的选择。</p>

<h1>你自己的类</h1>

<p>单独使用原子属性不会让你的类线程安全的。它只会保护你在setter中免受竞态条件(race conditions)，但不会保护你的应用程序逻辑。请考虑以下代码片段：</p>

<p>```objc
if (self.contents) {</p>

<pre><code>CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, 
  (__bridge CFStringRef)self.contents, NULL);
// draw string
</code></pre>

<p>}
```</p>

<p>我在PSPDFKit早早就犯了这个错误。偶尔，当<code>contents</code>属性检查后被设置为<code>nil</code>，该应用程序以EXC_BAD_ACCESS崩溃了。对这个问题简单的解决办法是捕获变量：</p>

<p>```objc
NSString *contents = self.contents;
if (contents) {</p>

<pre><code>CFAttributedStringRef stringRef = CFAttributedStringCreate(NULL, 
  (__bridge CFStringRef)contents, NULL);
// draw string
</code></pre>

<p>}
```</p>

<p>这样就解决了问题，但在大多数情况下，它不是那么简单的。试想一下，我们也有一个<code>textColor</code>属性，我们在一个线程中改变两次属性。那么，我们的渲染线程可能最终会使用有旧颜色值的新内容，我们得到一个奇怪的组合。这就是为什么Core Data在一个线程或队列中绑定模型对象。</p>

<p>对于这个问题没有一个统一标准的解决方案。使用不可变的模型是一个解决方案，但它有它自己的问题。另一种方法是限制在主线程或一个特定的队列更改现有对象，而在工作线程中使用之前生成的副本。我推荐Jonathan Sterling在<Lightweight Immutability in Objective-C>文章中为解决这个问题更多的想法。</p>

<p>简单的解决方法是使用<code>@synchronize</code>。其他的是非常，非常有可能让你陷入困境。更聪明的人一次又一次地在其他方法上失败了。</p>

<h3>实用的线程安全设计</h3>

<p>在试图做线程安全之前，认真考虑是否是必要的。请确保它不是过早的优化。如果它像是一个配置类，考虑线程安全是没有意义的。更好的方法是抛出一些断言来确保它的正确使用：</p>

<p>```objc
void PSPDFAssertIfNotMainThread(void) {</p>

<pre><code>NSAssert(NSThread.isMainThread, 
  @"Error: Method needs to be called on the main thread. %@", 
  [NSThread callStackSymbols]);
</code></pre>

<p>}
```</p>

<p>现在肯定有线程安全的代码，一个很好的例子就是缓存类。一个好的方法是使用一个并行dispatch_queue为读/写锁，以最大限度地提高性能，并尝试只锁定那些真正需要的地方。一旦你开始使用多个队列用于锁定不同部位，事情将很快变得棘手。</p>

<p>有时候，你也可以重写你的代码，使特殊的锁不是必需的。考虑这个代码片段，是一个多播委托的形式。 （在许多情况下，使用NSNotifications会更好，但也有有效的多路广播委托用例。）</p>

<p>```objc
// header
@property (nonatomic, strong) NSMutableSet *delegates;</p>

<p>// in init
_delegateQueue = dispatch_queue_create(&ldquo;com.PSPDFKit.cacheDelegateQueue&rdquo;,
  DISPATCH_QUEUE_CONCURRENT);</p>

<ul>
<li><p>(void)addDelegate:(id<PSPDFCacheDelegate>)delegate {
  dispatch_barrier_async(_delegateQueue, ^{
      [self.delegates addObject:delegate];
  });
}</p></li>
<li><p>(void)removeAllDelegates {
  dispatch_barrier_async(_delegateQueue, ^{
      self.delegates removeAllObjects];
  });
}</p></li>
<li><p>(void)callDelegateForX {
  dispatch_sync(_delegateQueue, ^{
      [self.delegates enumerateObjectsUsingBlock:^(id<PSPDFCacheDelegate> delegate, NSUInteger idx, BOOL *stop) {
          // Call delegate
      }];
  });
}
```</p></li>
</ul>


<p>除非<code>addDelegate:</code>或<code>removeDelegate:</code>每秒被调用上千次，否则下面是更简洁的方法：</p>

<p>```objc
// header
@property (atomic, copy) NSSet *delegates;</p>

<ul>
<li><p>(void)addDelegate:(id<PSPDFCacheDelegate>)delegate {
  @synchronized(self) {
      self.delegates = [self.delegates setByAddingObject:delegate];
  }
}</p></li>
<li><p>(void)removeAllDelegates {
  self.delegates = nil;
}</p></li>
<li><p>(void)callDelegateForX {
  [self.delegates enumerateObjectsUsingBlock:^(id<PSPDFCacheDelegate> delegate, NSUInteger idx, BOOL *stop) {
      // Call delegate
  }];
}
```</p></li>
</ul>


<p>当然，这个例子有点儿认为构造的，它可以简单的局限于在主线程更改。但对于许多数据结构，在修改方法中创建不可变的副本是值得的，让广大的应用程序逻辑并不需要处理过多的锁定。注意，我们仍然要在<code>addDelegate:</code>申请锁，否则如果委托对象被来自不同的线程同时调用，它可能会迷失。</p>

<h1>GCD的陷阱</h1>

<p>对于大部分的锁定需求，GCD是完美的。这很简单，很快速，并且它的基于块的API使得它更难偶然做出不平衡锁。不过，也有不少缺陷，我们将要在这里探索其中一些。</p>

<h3>使用GCD作为递归锁</h3>

<p>GCD是一个队列来序列化访问共享资源。这可以被用于锁定，但它比<code>@synchronized</code>大不相同。 GCD队列是不可重入的 &ndash; 这将打破队列特性。许多人试图使用<code>dispatch_get_current_queue()</code>来作为替代方案，这是一个坏主意。Apple在iOS6中废弃此方法自然有它的原因。</p>

<p>```objc
// This is a bad idea.
inline void pst_dispatch_sync_reentrant(dispatch_queue_t queue,
  dispatch_block_t block)
{</p>

<pre><code>dispatch_get_current_queue() == queue ? block() 
                                      : dispatch_sync(queue, block);
</code></pre>

<p>}
```</p>

<p>测试当前队列简单的解决方案可能起作用，但当你的代码变得更加复杂的时候，你可能会在同一时间对多个队列上锁，它会失败。一旦你是这种情况，你几乎肯定会遇到死锁。当然，人们可以使用<code>dispatch_get_specific()</code>，它会遍历整个队列的层次结构来测试特定的队列。对于您将不得不编写应用此元数据的自定义队列的构造函数。不要走那条路，很多使用情况下，NSRecursiveLock是更好的解决方案。</p>

<h3>dispatch_async的固定时序问题</h3>

<p>在UIKit中有一些时序问题？大多数时候，这将是完美的“修复”：</p>

<p>```objc
dispatch_async(dispatch_get_main_queue(), ^{</p>

<pre><code>// Some UIKit call that had timing issues but works fine 
// in the next runloop.
[self updatePopoverSize];
</code></pre>

<p>});
```</p>

<p>相信我，不要这样做。这将在以后缠着你因为你的应用程序变得越来越大。这是超级难调试，并因为“时序问题”当你需要调度越来越多，事情很快会土崩瓦解。看你的代码，找到适当调用的位置（例如viewWillAppear而不是viewDidLoad中）。在我的代码库仍然有一些黑客方式，但大部分都会被适当的记录并且提交问题。</p>

<p>请记住，这真不是GCD特有的，但它是一个常见的反模式，只是GCD很容易做到。你可以使用同样的才智<code>performSelector:afterDelay:</code>，其中下一个runloop的延迟是0.f。</p>

<h3>在性能关键代码中使用混合dispatch_sync和dispatch_async</h3>

<p>那个花了我一段时间才弄清楚。在PSPDFKit中有一个使用LRU列表来跟踪图像访问的缓存类。当你通过页面滚动，它会被调用很多次。最初的实现中对于可用的访问使用dispatch_sync，用dispatch_async来更新LRU位置。这导致帧速率远远低于每秒60帧的目标。</p>

<p>当你的应用程序中运行的其他代码阻止GCD的线程，它可能需要一段时间，直到调度管理器发现一个线程来执行dispatch_async代码 &ndash; 在那之前，你的同步调用将被阻塞。即使，在这个例子中，在异步情况下执行的顺序并不重要，没有简单的方法来告诉给GCD 。读/写锁在这里不会有任何帮助，因为异步流程非常肯定需要执行一个写屏障，在这期间你的所有读操作都会被锁定。教训：如果滥用， dispatch_async可以是昂贵的。使用它来锁操作要非常小心。</p>

<h3>使用dispatch_async来调度内存密集型操作</h3>

<p>我们已经谈了很多关于NSOperations ，而且使用更高层的API通常是一个好主意。如果你处理的是内存密集型操作的工作块，这是尤其如此。</p>

<p>在旧版本的PSPDFKit中，我用了一个GCD队列来调度写缓存JPG图像到磁盘。当视网膜的iPad出来了，这开始引起麻烦。分辨率加倍，比起渲染图像，对图像数据进行编码需要更长的时间。因此，操作堆积在队列中，当系统繁忙它可能会因为内存耗尽而崩溃。</p>

<p>没有办法来看到有多少操作在排队里（除非你手动添加代码来追踪这一点） ，而且也没有内置的方式来取消操作万一收到内存不足的通知。切换到NSOperations使代码更加可调试，并允许这一切都无需编写手动管理代码。</p>

<p>当然也有一些注意事项，例如你不能在你的NSOperationQueue上设置一个目标队列（如为节流的I/O而<code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> ） 。但是，这是一个为可调试性付出的很小的代价，也防止你陷入类似问题，如优先级反转。我甚至建议使用漂亮的NSBlockOperation API，并建议NSOperation的真正子类，包括描述的实现。这是更多的工作，但后来，有一个方法出奇的有用是打印所有运行/挂起的操作。</p>
]]></content>
  </entry>
  
</feed>
