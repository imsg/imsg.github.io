<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I'm Anson]]></title>
  <link href="http://imsg.github.io/atom.xml" rel="self"/>
  <link href="http://imsg.github.io/"/>
  <updated>2013-12-22T21:54:16+08:00</updated>
  <id>http://imsg.github.io/</id>
  <author>
    <name><![CDATA[Anson Zhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[值对象]]></title>
    <link href="http://imsg.github.io/blog/2013/12/21/value-objects/"/>
    <updated>2013-12-21T13:45:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/12/21/value-objects</id>
    <content type="html"><![CDATA[<p>翻译自<a href="http://www.objc.io/issue-7/value-objects.html">Value Objects</a></p>

<p>在这篇文章中，我们将看看如何用Objective-C语言编写值对象。在编写时，我们将会接触到Objective-C中的重要协议和方法。一个值对象是一个包含一些值的对象，并且可以进行相等比较。通常值对象可以被用作模型对象。例如，考虑一个简单的<em>Person</em>对象：</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSDate</span><span class="o">*</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建这些类型的对象是我们工作的面包和黄油（译者注：基本元素），虽然这些对象看上去很简单，但是仍然包含许多微妙之处。</p>

<p>有一件事，我们很多人硬性的认为这些对象应该是一成不变的。一旦你创建了一个<em>Person</em>对象，它不可能被改变。我们将在稍后涉及到可变性这个问题。</p>

<h1>属性</h1>

<p>首先要注意的是我们使用属性来定义一个<em>Person</em>的特征。创建属性是想当机械的：对于普通对象的属性，你设置它们为<code>nonatomic</code>和<code>strong</code>，而对于标量属性你只需要设置<code>nonatomic</code>。默认情况下，它们也是<code>assign</code>。有一个例外，对于具有可变副本的属性，你想将他们定义为<code>copy</code>。例如，name属性的类型是<code>NSString</code>，有可能出现的情况是，有人创建了一个<em>Person</em>对象，并指定类型为<code>NSMutableString</code>的值。然后一段时间后，他或她可能会改变这个可变的字符串。如果我们的属性是<code>strong</code>而不是<code>copy</code>，我们的<em>Person</em>对象会随之改变，这不是我们想要的。对于容器类型也是一样的，例如数组或者字典。</p>

<p>请注意，这个拷贝是浅拷贝，容器可能还包含可变对象。例如，如果你有一个<code>NSMutableArray *a</code>包含有<code>NSMutableDictionary</code>元素，则<code>[a copy]</code>将会给你一个不可变数组，但是元素是相同的<code>NSMutableDictionary</code>对象。正如我们稍后将看到的，不可变对象的拷贝是无成本的，但是它增加了引用计数。</p>

<p>在旧的代码中，你可能看不到属性，因为他们是相对近期才加入到Objective-C语言的。代替现有属性，有可能会看到自定义的getter和setter方法，或纯实例变量。对于现在的代码，似乎似乎大多数人都同意使用属性，这也是我们所推荐的。</p>

<h3>更多阅读</h3>

<p><a href="http://stackoverflow.com/questions/387959/nsstring-property-copy-or-retain">NSString:copy or retian</a></p>

<h1>初始化方法</h1>

<p>如果我们想要不可变对象，我们应该确保他们被创建后不能进行修改。我们可以通过添加一个初始化方法和在接口里使我们的属性只读来做到这一点。我们的接口将如下所示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">copy</span><span class="p">,</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">,</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSDate</span><span class="o">*</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class='line'>                   <span class="nf">birthDate:</span><span class="p">(</span><span class="n">NSDate</span><span class="o">*</span><span class="p">)</span><span class="nv">birthDate</span>
</span><span class='line'>                <span class="nf">numberOfKids:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后，在我们的实现中，我们必须使我们的属性<code>readwrite</code>，从而生成实例变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Person</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">copy</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">strong</span><span class="p">)</span> <span class="n">NSDate</span><span class="o">*</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">)</span> <span class="n">NSUInteger</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Person</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithName:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class='line'>                   <span class="nf">birthDate:</span><span class="p">(</span><span class="n">NSDate</span><span class="o">*</span><span class="p">)</span><span class="nv">birthDate</span>
</span><span class='line'>                <span class="nf">numberOfKids:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nv">numberOfKids</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">=</span> <span class="n">birthDate</span><span class="p">;</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="o">=</span> <span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在我们可以构造新的<em>Person</em>对象，但不能修改它们了。这是非常有帮助的，当编写与<em>Person</em>对象工作的其他类时，我们知道我们正在工作的值不能改变。</p>

<h1>相等比较</h1>

<p>要比较是否相等，我们必须实现<code>isEqual:</code>方法。我们希望<code>isEqual:</code>返回true当且仅当所有的属性都相等。由Mike Ash（<a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">实现相等和散列</a>）和NSHipster（<a href="http://nshipster.com/equality/">相等</a>）写的两篇很好的文章解释了如何做到这点。首先，让我们写<code>isEqual:</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isEqual:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">obj</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">obj</span> <span class="nl">isKindOfClass:</span><span class="p">[</span><span class="n">Person</span> <span class="n">class</span><span class="p">]])</span> <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">other</span> <span class="o">=</span> <span class="p">(</span><span class="n">Person</span><span class="o">*</span><span class="p">)</span><span class="n">obj</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">nameIsEqual</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">name</span> <span class="o">||</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="nl">isEqual:</span><span class="n">other</span><span class="p">.</span><span class="n">name</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">birthDateIsEqual</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">||</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="nl">isEqual:</span><span class="n">other</span><span class="p">.</span><span class="n">birthDate</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">numberOfKidsIsEqual</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nameIsEqual</span> <span class="o">&amp;&amp;</span> <span class="n">birthDateIsEqual</span> <span class="o">&amp;&amp;</span> <span class="n">numberOfKidsIsEqual</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，我们检查是否我们是相同类型的类。如果不是，我们肯定不相等。然后对每个对象的属性，我们检查是否指针是相等的。||左侧的运算数似乎是多余的，但如果两个属性都为<code>nil</code>则返回<code>YES</code>。为了比较标量值相等像<code>NSUInteger</code>，我们可以只使用<code>==</code>。</p>

<p>有一件事值得注意：这里我们分成不同的属性到他们自己的布尔值里。在实践中，可能将它们合成一个大的条件更有意义，因为这样你直接得到惰性求值。在上面的例子中，如果名字不相等，我们就不需要检查任何其他的属性。通过把所有组合成一个if语句，我们直接得到优化。</p>

<p>下一步，按照<a href="https://developer.apple.com/library/mac/documentation/cocoa/reference/foundation/Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/isEqual:">这个文档</a>，我们需要实现一个哈希函数也是如此。Apple说：</p>

<blockquote><p>如果两个对象相等，他们必须有相同的哈希值。如果你在子类中定义了<code>isEqual:</code>，并且打算把该子类的实例放入集合中，这最后一点就特别重要了。请确保你在你的子类中也定义了哈希。</p></blockquote>

<p>首先，我们可以尝试运行下面没有实现哈希函数的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Person</span><span class="o">*</span> <span class="n">p1</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName:</span><span class="n">name</span> <span class="nl">birthDate:</span><span class="n">start</span> <span class="nl">numberOfKids:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">Person</span><span class="o">*</span> <span class="n">p2</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName:</span><span class="n">name</span> <span class="nl">birthDate:</span><span class="n">start</span> <span class="nl">numberOfKids:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'><span class="n">NSDictionary</span><span class="o">*</span> <span class="n">dict</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="nl">p1:</span> <span class="s">@&quot;one&quot;</span><span class="p">,</span> <span class="nl">p2:</span> <span class="s">@&quot;two&quot;</span><span class="p">};</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">dict</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>我第一次跑了上面的代码，一切都很好，在字典中有两个项目。第二次，只有一个了。事情变得非常不可预测了，所以我们照着文档说的来做了。</p>

<p>正如你可能还记得您的计算机科学课程中，写一个好的哈希函数不是很容易的。一个好的哈希函数必须是确定性的和均匀的。确定性意味着，在相同的输入下需要生成相同的哈希值。均匀表示哈希函数的结果应该均匀地将输入映射在输出范围内。你的输出越均匀，你在集合中使用这些对象的性能越好。</p>

<p>首先，为了弄清楚，让我们来看看当我们没有一个哈希函数发生了什么，我们尝试使用<em>Person</em>对象作为字典的键：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSMutableDictionary</span><span class="o">*</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSDate</span><span class="o">*</span> <span class="n">start</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">];</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">50000</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span><span class="o">*</span> <span class="n">name</span> <span class="o">=</span> <span class="n">randomString</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithName:</span><span class="n">name</span> <span class="nl">birthDate:</span><span class="p">[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">numberOfKids:</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">dictionary</span> <span class="nl">setObject:</span><span class="s">@&quot;value&quot;</span> <span class="nl">forKey:</span><span class="n">p</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%f&quot;</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSDate</span> <span class="n">date</span><span class="p">]</span> <span class="nl">timeIntervalSinceDate:</span><span class="n">start</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>这在我的机器上运行需要29秒。相比之下，当我们实现一个基本的哈希函数，相同的代码运行只需要0.4秒。这不是合适的基准，但也给出了一个好的迹象，为什么要实现一个适当的哈希函数是很重要的。 对于<em>Person</em>类，我们可以用这样的哈希函数开始：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="nf">hash</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="p">.</span><span class="n">hash</span> <span class="o">^</span> <span class="n">self</span><span class="p">.</span><span class="n">birthDate</span><span class="p">.</span><span class="n">hash</span> <span class="o">^</span> <span class="n">self</span><span class="p">.</span><span class="n">numberOfKids</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这将从我们的属性中产生三个哈希值并且XOR他们。在这种情况下，对我们来说已经足够了，因为NSString的哈希函数对于短字符串来说很好（过去表现良好的字符串<a href="http://www.abakia.de/blog/2012/12/05/nsstring-hash-is-bad/">最多96个字符</a>，但是现在已经改变了。见<a href="http://www.opensource.apple.com/source/CF/CF-855.11/CFString.c">CFString.c</a>，寻找哈希）。对于严重的散列，你的哈希函数取决于你拥有的数据。这被<a href="http://www.mikeash.com/pyblog/friday-qa-2010-06-18-implementing-equality-and-hashing.html">Mike Ash的文章</a>和<a href="http://www.burtleburtle.net/bob/hash/spooky.html">其他地方</a>所提及。</p>

<p>在哈希的<a href="https://developer.apple.com/library/mac/documentation/cocoa/Reference/Foundation/Protocols/NSObject_Protocol/Reference/NSObject.html#//apple_ref/occ/intfm/NSObject/hash">文档</a>里，有如下的段落：</p>

<blockquote><p>如果一个可变对象被添加到使用哈希值来确定集合中对象位置的集合中，当对象在集合中，对象的哈希方法返回的值必须不能改变。因此，无论是哈希方法必须不依赖于任何对象的内部状态信息，还是当对象在集合中你必须确保该对象的内部状态信息不会改变。因此，例如，一个可变字典可以放入一个哈希表中，但是当它在那里你不能改变它。（请注意，可能很难知道给定的对象是否在一个集合中。）</p></blockquote>

<p>这是为了确保你的对象是不可变的另一个非常重要的原因。然后，你甚至不必担心这个问题了。</p>

<h3>更多阅读</h3>

<ul>
<li><a href="https://gist.github.com/steipete/6133152">A hash function for CGRect</a></li>
<li><a href="http://www.burtleburtle.net/bob/hash/doobs.html">A Hash Function for Hash Table Lookup</a></li>
<li><a href="http://www.burtleburtle.net/bob/hash/spooky.html">SpookyHash: a 128-bit noncryptographic hash</a></li>
<li><a href="http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/">Why do hash functions use prime numbers?</a></li>
</ul>


<h1>NSCopying</h1>

<p>为了确保我们的对象是有用的，可以方便的实现<code>NSCopying</code>协议。让我们举例来说，在容器类中使用它们。对于我们类中的一个可变的变量，<code>NSCopying</code>可以被这样实现：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Person</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Person</span> <span class="nl">allocWithZone:</span><span class="n">zone</span><span class="p">]</span> <span class="nl">initWithName:</span><span class="n">self</span><span class="p">.</span><span class="n">name</span>
</span><span class='line'>                                                <span class="nl">birthDate:</span><span class="n">self</span><span class="p">.</span><span class="n">birthDate</span>
</span><span class='line'>                                             <span class="nl">numberOfKids:</span><span class="n">self</span><span class="p">.</span><span class="n">numberOfKids</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然而，在协议文档中，他们提到另一种方式来实现<code>NSCopying</code>：</p>

<blockquote><p>当类和它的内容是不可变的，通过保留原有的实现NSCopying，而不是穿件一个新的副本。</p></blockquote>

<p>因此，对于我们不可变的版本，我们只要这样做：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">copyWithZone:</span><span class="p">(</span><span class="n">NSZone</span> <span class="o">*</span><span class="p">)</span><span class="nv">zone</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>NSCoding</h1>

<p>如果我们要序列化我们的对象，我们可以通过实现<code>NSCoding</code>来做到这一点。该协议存在两个必需的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">decoder</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">encoder</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现这个和实现相等方法同样简单，也比较机械：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nf">initWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aDecoder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeObjectForKey:</span><span class="s">@&quot;birthDate&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="o">=</span> <span class="p">[</span><span class="n">aDecoder</span> <span class="nl">decodeIntegerForKey:</span><span class="s">@&quot;numberOfKids&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">encodeWithCoder:</span><span class="p">(</span><span class="n">NSCoder</span> <span class="o">*</span><span class="p">)</span><span class="nv">aCoder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeObject:</span><span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="nl">forKey:</span><span class="s">@&quot;name&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeObject:</span><span class="n">self</span><span class="p">.</span><span class="n">birthDate</span> <span class="nl">forKey:</span><span class="s">@&quot;birthDate&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">aCoder</span> <span class="nl">encodeInteger:</span><span class="n">self</span><span class="p">.</span><span class="n">numberOfKids</span> <span class="nl">forKey:</span><span class="s">@&quot;numberOfKids&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于它可以从<a href="http://nshipster.com/nscoding/">NSHipster</a>和<a href="http://www.mikeash.com/pyblog/friday-qa-2013-08-30-model-serialization-with-property-lists.html">Mike Ash的博客</a>中阅读更多。顺便说一句，当处理不受信任的来源，如数据来自网络，不要使用<code>NSCoding</code>。因为数据可能被篡改。通过<a href="https://developer.apple.com/library/mac/documentation/security/conceptual/securecodingguide/Articles/ValidatingInput.html#//apple_ref/doc/uid/TP40007246-SW9">修改存档的数据</a>，它很可能要执行远程代码进行攻击。取而代之，使用<a href="http://nshipster.com/nssecurecoding/">NSSecureCoding</a>或像JSON的自定义格式。</p>

<h1>Mantle</h1>

<p>现在我们留下了一个问题：我们可以自动化它吗？事实证明，我们可以做到。一种方法是代码生成，但幸运的是有一个更好的选择：<a href="https://github.com/github/Mantle">Mantle</a>。Mantle使用内省(introspection)来产生<code>isEqual:</code>和哈希。此外，它提供了一些方法来帮助你创建字典，然后可以用于写入和读取JSON。当然，一般运行时这样做将不会像自己写的代码一样有效率，但在另一方面，自动执行是一个更不容易出错的过程。</p>

<h1>可变性</h1>

<p>在C语言和Objective-C语言中，可变的值是默认值。在某种程度上，它们是非常方便的，因为你可以在任何时候改变任何东西。当建立较小的系统，这应该是没有问题的。然而，正如我们许多人了解的方法，建立规模更大的系统时，事情是不可变时会相当容易。在Objective-C中，我们已经使用不可变对象很长时间了，并且现在其他语言也开始添加。</p>

<p>我们来看看可变对象的两个问题。一个是当你不希望它改变时它们可能会改变，另一个是在多线程环境中使用可变对象。</p>

<h2>意想不到的变化</h2>

<p>假设我们有一个表视图控制器，其中有一个<em>People</em>属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UITableViewController</span>
</span><span class='line'>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">people</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在我们的实现里，我们只是映射每个数组元素到一个单元格：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">numberOfSectionsInTableView:</span><span class="p">(</span><span class="n">UITableView</span><span class="o">*</span><span class="p">)</span><span class="nv">tableView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nf">tableView:</span><span class="p">(</span><span class="n">UITableView</span><span class="o">*</span><span class="p">)</span><span class="nv">tableView</span> <span class="nf">numberOfRowsInSection:</span><span class="p">(</span><span class="n">NSInteger</span><span class="p">)</span><span class="nv">section</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">people</span><span class="p">.</span><span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，在设置了以上视图控制器的代码中，我们可能有这样的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="n">loadItems</span><span class="p">];</span> <span class="c1">// Add 100 items to the array</span>
</span><span class='line'><span class="n">tableVC</span><span class="p">.</span><span class="n">people</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">items</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="n">tableVC</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>表视图将开始调用方法，如<code>tableView:numberOfRowsInSection:</code>，开始一切都很好，但是假设在某些时候，我们执行以下操作：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">items</span> <span class="nl">removeObjectAtIndex:</span><span class="mi">1</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这改变了我们的<em>items</em>数组，但是它也改变了我们表视图控制器里的<em>People</em>数组。如果我们这样做而没有和表视图控制器有任何进一步的沟通，表视图将仍然认为有100个项目，而我们的数组只包含99个。不好的事情将会发生。取而代之，我们应该做的是以<code>copy</code>声明我们的属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'> <span class="k">@interface</span> <span class="nc">ViewController</span> : <span class="nc">UITableViewController</span>
</span><span class='line'>
</span><span class='line'> <span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSArray</span><span class="o">*</span> <span class="n">items</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，无论什么时候我们分配一个可变的数组给<em>items</em>，一个不可变的副本将会创建。如果我们分配一个常规（不可变）的数组的值，拷贝操作是无害的，它仅仅增加了引用计数。</p>

<h2>多线程</h2>

<p>假设我们有一个可变对象，<em>Account</em>，代表一个银行账户，它有一个方法<code>transfer:to:</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">transfer:</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="nv">amount</span> <span class="nf">to:</span><span class="p">(</span><span class="n">Account</span><span class="o">*</span><span class="p">)</span><span class="nv">otherAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">balance</span> <span class="o">-</span> <span class="n">amount</span><span class="p">;</span>
</span><span class='line'>    <span class="n">otherAccount</span><span class="p">.</span><span class="n">balance</span> <span class="o">=</span> <span class="n">otherAccount</span><span class="p">.</span><span class="n">balance</span> <span class="o">+</span> <span class="n">amount</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>多线程的代码可以在许多方面产生错误。例如，如果线程A读取<code>self.balance</code>，线程B可能会在线程A继续之前修改它。对于所有涉及到的危险的一个很好的解释，请参阅我们的<a href="http://www.objc.io/issue-2/">第二个问题</a>。</p>

<p>如果我们将它替换为不可变对象，事情就容易多了。我们不能对其进行修改，这迫使我们在一个完全不同的层次上提供可变性，产生更简单的代码。</p>

<h2>缓存</h2>

<p>另一件事，不可变性可以帮助的是在缓存值的时候。例如，假设你已经解析了一个markdown文档为一个包含所有不同元素节点的树形结构。如果你想生成的另外的HTML，你可以缓存这个值，因为你知道没有任何子节点会改变。如果你有可变对象，你则需要每次从零开始生成HTML，或构建优化并观察每一个单独的对象。和不变性相比，你不必担心无效的缓存。当然，这可能会带来性能损失。在几乎所有情况下，然而，简单将超过在性能上的略有下降。</p>

<h2>在其他语言里的不可变性</h2>

<p>不可变对象是灵感来自于像<a href="http://www.haskell.org/">Haskell</a>的函数式编程语言的概念之一。在Haskell中，值默认是不可变的。Haskell程序通常有一个<a href="http://en.wikipedia.org/wiki/Purely_functional">单纯功能</a>的核心，里面没有可变对象，没有状态，而且没有副作用，像I/O。</p>

<p>我们可以在Objective-C编程中借鉴这个。在可能的情况下使用不可变对象，我们的项目将变得更容易测试。<a href="https://www.destroyallsoftware.com/talks/boundaries">Gary Bernhardt有一个很棒的讨论</a>，显示了如何使用不可变对象来帮助我们写出更好的软件。在这个讨论中，他使用的是Ruby，但是其概念也同样适用于Objective-C语言。</p>

<h3>进一步阅读</h3>

<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/CocoaEncyclopedia/ObjectMutability/ObjectMutability.html#//apple_ref/doc/uid/TP40010810-CH5-SW1">Cocoa Encyclopedia: Object Mutability</a></li>
<li><a href="http://garbagecollective.quora.com/Mutability-aliasing-and-the-caches-you-didnt-know-you-had">Mutability and Caching</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[列举所有UIFont字体]]></title>
    <link href="http://imsg.github.io/blog/2013/12/14/list-all-uifont/"/>
    <updated>2013-12-14T23:08:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/12/14/list-all-uifont</id>
    <content type="html"><![CDATA[<p>UI开发中总是需要了解iOS中提供的所有字体，UIFont接口<code>+ (UIFont *)fontWithName:(NSString *)fontName size:(CGFloat)fontSize
</code>也是通过字体名称来得到UIFont对象。</p>

<p>简单写了几行代码就可以列举出所有字体。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">family</span><span class="p">,</span> <span class="o">*</span><span class="n">font</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">family</span> <span class="k">in</span> <span class="p">[</span><span class="n">UIFont</span> <span class="n">familyNames</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Family: %@&quot;</span><span class="p">,</span> <span class="n">family</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">font</span> <span class="k">in</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">fontNamesForFamilyName:</span><span class="n">family</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;</span><span class="se">\t\t</span><span class="s">Font: %@&quot;</span><span class="p">,</span> <span class="n">font</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>打印出结果如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="nl">Family:</span> <span class="n">Thonburi</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Thonburi</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Thonburi</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Thonburi</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Snell</span> <span class="n">Roundhand</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">SnellRoundhand</span><span class="o">-</span><span class="n">Black</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">SnellRoundhand</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">SnellRoundhand</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Academy</span> <span class="n">Engraved</span> <span class="n">LET</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AcademyEngravedLetPlain</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Marker</span> <span class="n">Felt</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">MarkerFelt</span><span class="o">-</span><span class="n">Thin</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">MarkerFelt</span><span class="o">-</span><span class="n">Wide</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Avenir</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Heavy</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Oblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Black</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Book</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">BlackOblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">HeavyOblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">MediumOblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">LightOblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">Roman</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Avenir</span><span class="o">-</span><span class="n">BookOblique</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Geeza</span> <span class="n">Pro</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GeezaPro</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GeezaPro</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GeezaPro</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Arial</span> <span class="n">Rounded</span> <span class="n">MT</span> <span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ArialRoundedMTBold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Trebuchet</span> <span class="n">MS</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Trebuchet</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TrebuchetMS</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TrebuchetMS</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TrebuchetMS</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Arial</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ArialMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Arial</span><span class="o">-</span><span class="n">BoldItalicMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Arial</span><span class="o">-</span><span class="n">ItalicMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Arial</span><span class="o">-</span><span class="n">BoldMT</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Marion</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Marion</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Marion</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Marion</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Menlo</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Menlo</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Menlo</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Menlo</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Menlo</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Malayalam</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">MalayalamSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">MalayalamSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Kannada</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">KannadaSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">KannadaSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Gurmukhi</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GurmukhiMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GurmukhiMN</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Bodoni</span> <span class="mi">72</span> <span class="n">Oldstyle</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoOSITCTT</span><span class="o">-</span><span class="n">BookIt</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoOSITCTT</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoOSITCTT</span><span class="o">-</span><span class="n">Book</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Bradley</span> <span class="n">Hand</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BradleyHandITCTT</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Cochin</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Cochin</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Cochin</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Cochin</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Cochin</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Sinhala</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">SinhalaSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">SinhalaSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Hiragino</span> <span class="n">Kaku</span> <span class="n">Gothic</span> <span class="n">ProN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HiraKakuProN</span><span class="o">-</span><span class="n">W6</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HiraKakuProN</span><span class="o">-</span><span class="n">W3</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Iowan</span> <span class="n">Old</span> <span class="n">Style</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">IowanOldStyle</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">IowanOldStyle</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">IowanOldStyle</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">IowanOldStyle</span><span class="o">-</span><span class="n">Roman</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Damascus</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DamascusBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Damascus</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DamascusMedium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DamascusSemiBold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Al</span> <span class="n">Nile</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AlNile</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AlNile</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Farah</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Farah</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Papyrus</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Papyrus</span><span class="o">-</span><span class="n">Condensed</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Papyrus</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Verdana</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Verdana</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Verdana</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Verdana</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Verdana</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Zapf</span> <span class="n">Dingbats</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ZapfDingbatsITC</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">DIN</span> <span class="n">Condensed</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DINCondensed</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Avenir</span> <span class="n">Next</span> <span class="n">Condensed</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">MediumItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">UltraLightItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">UltraLight</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">HeavyItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">Heavy</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">DemiBoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">DemiBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNextCondensed</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Courier</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Courier</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Courier</span><span class="o">-</span><span class="n">Oblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Courier</span><span class="o">-</span><span class="n">BoldOblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Courier</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Hoefler</span> <span class="n">Text</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HoeflerText</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HoeflerText</span><span class="o">-</span><span class="n">BlackItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HoeflerText</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HoeflerText</span><span class="o">-</span><span class="n">Black</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Euphemia</span> <span class="n">UCAS</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">EuphemiaUCAS</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">EuphemiaUCAS</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">EuphemiaUCAS</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Helvetica</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Helvetica</span><span class="o">-</span><span class="n">Oblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Helvetica</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Helvetica</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Helvetica</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Helvetica</span><span class="o">-</span><span class="n">BoldOblique</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Helvetica</span><span class="o">-</span><span class="n">LightOblique</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Hiragino</span> <span class="n">Mincho</span> <span class="n">ProN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HiraMinProN</span><span class="o">-</span><span class="n">W6</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HiraMinProN</span><span class="o">-</span><span class="n">W3</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Bodoni</span> <span class="n">Ornaments</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniOrnamentsITCTT</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Superclarendon</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">BlackItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">LightItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Superclarendon</span><span class="o">-</span><span class="n">Black</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Mishafi</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DiwanMishafi</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Optima</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Optima</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Optima</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Optima</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Optima</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Optima</span><span class="o">-</span><span class="n">ExtraBlack</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Gujarati</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GujaratiSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GujaratiSangamMN</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Devanagari</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DevanagariSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DevanagariSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Apple</span> <span class="n">Color</span> <span class="n">Emoji</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleColorEmoji</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Savoye</span> <span class="n">LET</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">SavoyeLetPlain</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Kailasa</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Kailasa</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Kailasa</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Times</span> <span class="n">New</span> <span class="n">Roman</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TimesNewRomanPS</span><span class="o">-</span><span class="n">BoldItalicMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TimesNewRomanPSMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TimesNewRomanPS</span><span class="o">-</span><span class="n">BoldMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TimesNewRomanPS</span><span class="o">-</span><span class="n">ItalicMT</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Telugu</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TeluguSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TeluguSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Heiti</span> <span class="n">SC</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">STHeitiSC</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">STHeitiSC</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Apple</span> <span class="n">SD</span> <span class="n">Gothic</span> <span class="n">Neo</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleSDGothicNeo</span><span class="o">-</span><span class="n">Thin</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleSDGothicNeo</span><span class="o">-</span><span class="n">SemiBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleSDGothicNeo</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleSDGothicNeo</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleSDGothicNeo</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AppleSDGothicNeo</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Futura</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Futura</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Futura</span><span class="o">-</span><span class="n">CondensedMedium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Futura</span><span class="o">-</span><span class="n">MediumItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Futura</span><span class="o">-</span><span class="n">CondensedExtraBold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Bodoni</span> <span class="mi">72</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoITCTT</span><span class="o">-</span><span class="n">Book</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoITCTT</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoITCTT</span><span class="o">-</span><span class="n">BookIta</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Baskerville</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Baskerville</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Baskerville</span><span class="o">-</span><span class="n">SemiBoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Baskerville</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Baskerville</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Baskerville</span><span class="o">-</span><span class="n">SemiBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Baskerville</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Symbol</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Symbol</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Heiti</span> <span class="n">TC</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">STHeitiTC</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">STHeitiTC</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Copperplate</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Copperplate</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Copperplate</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Copperplate</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Party</span> <span class="n">LET</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">PartyLetPlain</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">American</span> <span class="n">Typewriter</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AmericanTypewriter</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AmericanTypewriter</span><span class="o">-</span><span class="n">CondensedLight</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AmericanTypewriter</span><span class="o">-</span><span class="n">CondensedBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AmericanTypewriter</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AmericanTypewriter</span><span class="o">-</span><span class="n">Condensed</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AmericanTypewriter</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Chalkboard</span> <span class="n">SE</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ChalkboardSE</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ChalkboardSE</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ChalkboardSE</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Avenir</span> <span class="n">Next</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">MediumItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">UltraLight</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">DemiBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">HeavyItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">Heavy</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">UltraLightItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">Regular</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">AvenirNext</span><span class="o">-</span><span class="n">DemiBoldItalic</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Bangla</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BanglaSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BanglaSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Noteworthy</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Noteworthy</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Noteworthy</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Zapfino</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Zapfino</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Tamil</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TamilSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">TamilSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Chalkduster</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Chalkduster</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Arial</span> <span class="n">Hebrew</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ArialHebrew</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ArialHebrew</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">ArialHebrew</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Georgia</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Georgia</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Georgia</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Georgia</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Georgia</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Helvetica</span> <span class="n">Neue</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">UltraLightItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">CondensedBold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">MediumItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">Thin</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">Medium</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">ThinItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">LightItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">UltraLight</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">HelveticaNeue</span><span class="o">-</span><span class="n">CondensedBlack</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Gill</span> <span class="n">Sans</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GillSans</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GillSans</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GillSans</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GillSans</span><span class="o">-</span><span class="n">Light</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GillSans</span><span class="o">-</span><span class="n">LightItalic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">GillSans</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Palatino</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Palatino</span><span class="o">-</span><span class="n">Roman</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Palatino</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Palatino</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Palatino</span><span class="o">-</span><span class="n">BoldItalic</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Courier</span> <span class="n">New</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">CourierNewPSMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">CourierNewPS</span><span class="o">-</span><span class="n">BoldMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">CourierNewPS</span><span class="o">-</span><span class="n">ItalicMT</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">CourierNewPS</span><span class="o">-</span><span class="n">BoldItalicMT</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Oriya</span> <span class="n">Sangam</span> <span class="n">MN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">OriyaSangamMN</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">OriyaSangamMN</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Didot</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Didot</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Didot</span><span class="o">-</span><span class="n">Italic</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">Didot</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">DIN</span> <span class="n">Alternate</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">DINAlternate</span><span class="o">-</span><span class="n">Bold</span>
</span><span class='line'><span class="nl">Family:</span> <span class="n">Bodoni</span> <span class="mi">72</span> <span class="n">Smallcaps</span>
</span><span class='line'>  <span class="nl">Font:</span> <span class="n">BodoniSvtyTwoSCITCTT</span><span class="o">-</span><span class="n">Book</span>
</span></code></pre></td></tr></table></div></figure>


<p>字体如下图所示：</p>

<p><img src="http://imsg.github.com/images/2013/UIFont_List.jpg" alt="UIFont" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[handle the return key in UITextView]]></title>
    <link href="http://imsg.github.io/blog/2013/12/12/handle-the-return-key-in-uitextview/"/>
    <updated>2013-12-12T09:30:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/12/12/handle-the-return-key-in-uitextview</id>
    <content type="html"><![CDATA[<p>今天QA同事提出希望模仿iOS native email client中写一封邮件时，在To/Cc/Bcc中填写email地址后按return键可以自动加上“, ”，不需要用户手动添加各个email地址之间的分隔符。如果写完收件人后再次return，则自动跳到下一个文本框中。
研究了一下，发现UITextFieldDelegate中有<code>- (BOOL)textFieldShouldReturn:(UITextField *)textField</code>回调，可以处理return事件，但是UITextViewDelegate没有此类方法。看了一下UITextViewDelegate类中其他方法，发现<code>- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text</code>同样可以实现此功能。</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">textView:</span><span class="p">(</span><span class="n">UITextView</span> <span class="o">*</span><span class="p">)</span><span class="nv">textView</span> <span class="nf">shouldChangeTextInRange:</span><span class="p">(</span><span class="n">NSRange</span><span class="p">)</span><span class="nv">range</span> <span class="nf">replacementText:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">text</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">shouldChangeText</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="k">switch</span> <span class="p">(</span><span class="n">textView</span><span class="p">.</span><span class="n">tag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">TextViewTagTo:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">TextViewTagCc:</span>
</span><span class='line'>        <span class="k">case</span> <span class="nl">TextViewTagBcc:</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">text</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">NSString</span> <span class="o">*</span><span class="n">oldText</span> <span class="o">=</span> <span class="p">[</span><span class="n">textView</span><span class="p">.</span><span class="n">text</span> <span class="nl">stringByTrimmingCharactersInSet:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="n">whitespaceAndNewlineCharacterSet</span><span class="p">]];</span>
</span><span class='line'>                <span class="n">NSUInteger</span> <span class="n">oldLen</span> <span class="o">=</span> <span class="n">oldText</span><span class="p">.</span><span class="n">length</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">oldLen</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">(</span><span class="n">oldLen</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">[[</span><span class="n">oldText</span> <span class="nl">substringFromIndex:</span><span class="n">oldLen</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;,&quot;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">textView</span> <span class="nl">setText:</span><span class="p">[</span><span class="n">oldText</span> <span class="nl">stringByTrimmingCharactersInSet:</span><span class="p">[</span><span class="n">NSCharacterSet</span> <span class="nl">characterSetWithCharactersInString:</span><span class="s">@&quot;,&quot;</span><span class="p">]]];</span>
</span><span class='line'>                    <span class="c1">// Jump to the next field</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">textView</span> <span class="n">resignFirstResponder</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">[[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">viewWithTag:</span><span class="n">textView</span><span class="p">.</span><span class="n">tag</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="n">becomeFirstResponder</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">oldLen</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="c1">// Append &quot;, &quot; to the end</span>
</span><span class='line'>                    <span class="n">NSString</span> <span class="o">*</span><span class="n">newText</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@%@&quot;</span><span class="p">,</span> <span class="n">oldText</span><span class="p">,</span> <span class="s">@&quot;, &quot;</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">textView</span> <span class="nl">setText:</span><span class="n">newText</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">shouldChangeText</span> <span class="o">=</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">default</span><span class="o">:</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">shouldChangeText</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thread-Safe Class Design]]></title>
    <link href="http://imsg.github.io/blog/2013/11/28/thread-safe-class-design/"/>
    <updated>2013-11-28T22:39:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/28/thread-safe-class-design</id>
    <content type="html"><![CDATA[<p>翻译自<a href="http://www.objc.io/issue-2/thread-safe-class-design.html">Thread-Safe Class Design</a></p>

<h1>线程安全类的设计</h1>

<p>此文章将侧重于编写线程安全类和使用Grand Central Displatch(GCD)时的实用的技巧，设计模式，以及反模式。</p>

<h1>线程安全</h1>

<h3>Apple的框架</h3>

<p>首先让我们来看一下Apple的框架。一般情况下，除非提前声明，否则大多数类默认不是线程安全的。一些是我们所期望的，但是另一些却会相当有趣。</p>

<p>其中甚至有经验的iOS/Mac开发人员常会犯的错误是在后台线程中访问部分UIKit/AppKit。最容易犯的错误是在后台线程中对property赋值，比如图片，因为他们的内容是在后台从网络上获取的。Apple的代码是性能优化过的，如果你从不同线程去改动property，它是不会警告你的。</p>

<p>例如图片这种情况，一个常见的问题是你的改动会产生延迟。但是如果两个线程同时设置图片，很可能你的程序将直接崩溃，因为当前设置的图片可能会被释放两次。由于这是和时机相关的，因此崩溃通常发生在客户使用时，而并不是在开发过程中。</p>

<p>虽然没有官方的工具来发现这样的错误，但是有一些技巧可以避免这种错误发生。<a href="https://gist.github.com/steipete/5664345">The UIKit Main Thread Guard</a>是一小段代码，可以修补任何调用UIView的setNeedsLayout和setNeedsDisplay，以及在发送调用之前检查是否执行在主线程。由于这两种方法被许多UIKit的setters方法调用（包括图片），这将会捕获许多线程相关的错误。虽然这个不使用私有API，但是我们不建议在产品程序中使用，而是最好在开发过程是使用。</p>

<p>UIKit非线程安全是Apple有意的设计决定。从性能方面来说线程安全没有太多好处，它实际上会使很多事情变慢。而事实上UIKit和主线程捆绑使它很容易编写并发程序和使用UIKit。你所需要做的就是确保总是在主线程上调用UIKit。</p>

<!--more-->


<h3>为什么UIKit不是线程安全的？</h3>

<p>像UIKit这样大的框架上确保线程安全是一个重大的任务，会带来巨大的成本。改变非原子property为原子property只是所需要改变的一小部分。通常你想要一次改变多个property，然后才能看到更改的结果。对于这一点，Apple不得不暴露一个方法，像CoreData的<code>performBlock:</code>和同步的方法<code>performBlockAndWait:</code>。如果你考虑大多数调用UIKit类是有关配置(configuration)，使他们线程安全更没有意义。</p>

<p>然而，即使调用不是关于配置(configuration)来共享内部状态，因此它们不是线程安全的。如果你已经写回到黑暗时代iOS3.2及以前的应用程序，你一定经历过当准备背景图像时使用<code>NSString</code>的<code>drawInRect:withFont:</code>随时崩溃。值得庆幸的是随着iOS4的到来，Apple提供了大部分绘图的方法和类，例如<code>UIColor</code>和<code>UIFont</code>在后台线程中的使用。</p>

<p>不幸的是，Apple的文档目前还缺乏有关线程安全的主题。他们建议只在主线程访问，甚至连绘画方法他们都不能保证线程安全。所以阅读iOS的版本说明总是一个好主意。</p>

<p>在大多数情况下，UIKit类只应该在程序的主线程使用。无论是从<code>UIResponder</code>派生的类，还是那些涉及以任何方式操作你的应用程序的用户界面。</p>

<h3>解除分配问题</h3>

<p>另一个在后台使用UIKit对象的风险是“解除分配问题”。Apple在TN2109里概括了这个问题，并提出了多种解决方案。这个问题是UI对象应该在主线程中释放，因为一部分对象有可能在dealloc中对视图层次结构进行更改。正如我们所知，这种对UIKit的调用需要发生在主线程上。</p>

<p>由于它常见于次线程，操作或块保留调用者，这很容易出错，并且很难找到并修复。这也是在AFNetworking中长期存在的一个bug，只是因为不是很多人知道这个问题，照例，显然它很罕见，并且很难重现崩溃。在异步块操作里一贯使用<code>__weak</code>和不访问ivars会有所帮助。</p>

<h3>集合类</h3>

<p>Apple有一个很好的概述文档，对iOS和Mac上列出线程安全最常见的基础类。一般情况下，不可变类，像NSArray是线程安全的，而它们的可变的变体，像NSMutableArray则不是。事实上，当在一个队列中序列化的访问时，是可以在不同线程中使用它们的。请记住，方法可能返回一个集合对象的可变变体，即使它们生命它们的返回类型是不可变的。好的做法是写一些像<code>return [array copy]</code>来确保返回的对象实际上是不可变的。</p>

<p>不同于像Java语言，Foundation框架不提供框架外的线程安全的集合类。其实这是非常合理的，因为在大多数情况下，你想在更高层使用你的锁去避免过多的锁操作。一个值得注意的例外是缓存，其中一个可变的字典可能会保存不变的数据-在这里Apple在iOS4中增加了NSCache，它不仅能锁定访问，还可以在低内存情况下清除它的内容。</p>

<p>这就是说，在你的程序中，这也许是有效的情况，其中一个线程安全的可变的字典可以很轻便的。而这要归功于类簇(class cluster)的解决方案，它可以很容易的写一个。</p>

<h1>原子属性(properties)</h1>

<p>有没有想过Apple如何处理原子设置/获取属性？现在你可能已经听说过spinlocks, semaphores, locks, @synchronized &ndash; 那Apple使用什么？幸运的是，Objective-C运行是公开的，所以我们可以看看幕后发生了什么。</p>

<p>一个非原子属性的setter方法可能看起来像这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">setUserName:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">userName</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">userName</span> <span class="o">!=</span> <span class="n">_userName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="p">[</span><span class="n">userName</span> <span class="n">retain</span><span class="p">];</span>
</span><span class='line'>          <span class="p">[</span><span class="n">_userName</span> <span class="n">release</span><span class="p">];</span>
</span><span class='line'>          <span class="n">_userName</span> <span class="o">=</span> <span class="n">userName</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是手动retain/release变量，然而用ARC生成的代码看起来类似。让我们看看这段代码，很显然当<code>setUserName:</code>被同时调用就遇到了麻烦。我们最终可能会释放<code>_userName</code>两次，这会破坏内存，并且导致难以发现的bug。</p>

<p>对于任意一个非手工实现的property内部发生的是，编译器生成一个调用<code>objc_setProperty_non_gc(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic, signed char shouldCopy)</code>。在我们的例子中，调用参数是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">objc_setProperty_non_gc</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">_cmd</span><span class="p">,</span>
</span><span class='line'>  <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">_userName</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)(</span><span class="n">self</span><span class="p">),</span> <span class="n">userName</span><span class="p">,</span> <span class="n">NO</span><span class="p">,</span> <span class="n">NO</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ptrdiff_t</code>你可能看起来很怪异，但最终它是一个简单的指针算法，因为一个Objective-C类正是另一个C结构。</p>

<p><code>objc_setProperty</code>调用下面的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kr">inline</span> <span class="kt">void</span> <span class="nf">reallySetProperty</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="kt">id</span> <span class="n">newValue</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ptrdiff_t</span> <span class="n">offset</span><span class="p">,</span> <span class="n">bool</span> <span class="n">atomic</span><span class="p">,</span> <span class="n">bool</span> <span class="n">copy</span><span class="p">,</span> <span class="n">bool</span> <span class="n">mutableCopy</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">id</span> <span class="n">oldValue</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">id</span> <span class="o">*</span><span class="n">slot</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="o">*</span><span class="p">)</span> <span class="p">((</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">self</span> <span class="o">+</span> <span class="n">offset</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">copy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">newValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">newValue</span> <span class="nl">copyWithZone:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">mutableCopy</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">newValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">newValue</span> <span class="nl">mutableCopyWithZone:</span><span class="nb">NULL</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">slot</span> <span class="o">==</span> <span class="n">newValue</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>        <span class="n">newValue</span> <span class="o">=</span> <span class="n">objc_retain</span><span class="p">(</span><span class="n">newValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">atomic</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">oldValue</span> <span class="o">=</span> <span class="o">*</span><span class="n">slot</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">slot</span> <span class="o">=</span> <span class="n">newValue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">spin_lock_t</span> <span class="o">*</span><span class="n">slotlock</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">PropertyLocks</span><span class="p">[</span><span class="n">GOODHASH</span><span class="p">(</span><span class="n">slot</span><span class="p">)];</span>
</span><span class='line'>        <span class="n">_spin_lock</span><span class="p">(</span><span class="n">slotlock</span><span class="p">);</span>
</span><span class='line'>        <span class="n">oldValue</span> <span class="o">=</span> <span class="o">*</span><span class="n">slot</span><span class="p">;</span>
</span><span class='line'>        <span class="o">*</span><span class="n">slot</span> <span class="o">=</span> <span class="n">newValue</span><span class="p">;</span>
</span><span class='line'>        <span class="n">_spin_unlock</span><span class="p">(</span><span class="n">slotlock</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">objc_release</span><span class="p">(</span><span class="n">oldValue</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除了相当有趣的名字，这种方法其实是相当简单，并使用128个在PropertyLocks可用的spinlocks其中之一。这是一个务实的和快速的解决方案 &ndash; 最坏的情况是，因为一个哈希冲突，一个setter不得不等待一个不相关的setter结束。</p>

<p>虽然这些方法在任何公共头文件都没有声明，但可以手动调用它们。我并不是说这是一个好主意，但如果你想要原子属性和想要同时实现setter，知道这些是很有趣的并且可能会相当有用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// Manually declare runtime methods.</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">void</span> <span class="nf">objc_setProperty</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">ptrdiff_t</span> <span class="n">offset</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">id</span> <span class="n">newValue</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">atomic</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="n">shouldCopy</span><span class="p">);</span>
</span><span class='line'><span class="k">extern</span> <span class="kt">id</span> <span class="nf">objc_getProperty</span><span class="p">(</span><span class="kt">id</span> <span class="n">self</span><span class="p">,</span> <span class="kt">SEL</span> <span class="n">_cmd</span><span class="p">,</span> <span class="n">ptrdiff_t</span> <span class="n">offset</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">BOOL</span> <span class="n">atomic</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define PSTAtomicRetainedSet(dest, src) objc_setProperty(self, _cmd, </span>
</span><span class='line'>  <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">dest</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)(</span><span class="n">self</span><span class="p">),</span> <span class="n">src</span><span class="p">,</span> <span class="n">YES</span><span class="p">,</span> <span class="n">NO</span><span class="p">)</span>
</span><span class='line'><span class="cp">#define PSTAtomicAutoreleasedGet(src) objc_getProperty(self, _cmd, </span>
</span><span class='line'>  <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">src</span><span class="p">)</span> <span class="o">-</span> <span class="p">(</span><span class="n">ptrdiff_t</span><span class="p">)(</span><span class="n">self</span><span class="p">),</span> <span class="n">YES</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://gist.github.com/steipete/5928690">参考这个gist</a>全部片段包括处理结构的代码。但是请记住我们不建议使用这个。</p>

<h3>@synchronized如何？</h3>

<p>你可能很好奇为什么Apple不使用一个已有的运行时特性<code>@synchronized(self)</code>来做属性锁。一旦你看了源代码，你将明白这还有很多事要做。Apple采用最多三个上锁/解锁序列，部分原因是他们还增加了异常展开(exception unwinding)。比起更加快速的spinlock方案，这个会慢一些。由于设置属性通常是相当快的，spinlocks是最完美的选择。当你需要确保没有代码死锁而抛出异常，<code>@synchronized(self)</code>是个好的选择。</p>

<h1>你自己的类</h1>

<p>单独使用原子属性不会让你的类线程安全的。它只会保护你在setter中免受竞态条件(race conditions)，但不会保护你的应用程序逻辑。请考虑以下代码片段：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">contents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFAttributedStringRef</span> <span class="n">stringRef</span> <span class="o">=</span> <span class="n">CFAttributedStringCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">self</span><span class="p">.</span><span class="n">contents</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// draw string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我在PSPDFKit早早就犯了这个错误。偶尔，当<code>contents</code>属性检查后被设置为<code>nil</code>，该应用程序以EXC_BAD_ACCESS崩溃了。对这个问题简单的解决办法是捕获变量：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span> <span class="o">*</span><span class="n">contents</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">contents</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">contents</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">CFAttributedStringRef</span> <span class="n">stringRef</span> <span class="o">=</span> <span class="n">CFAttributedStringCreate</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>      <span class="p">(</span><span class="n">__bridge</span> <span class="n">CFStringRef</span><span class="p">)</span><span class="n">contents</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// draw string</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就解决了问题，但在大多数情况下，它不是那么简单的。试想一下，我们也有一个<code>textColor</code>属性，我们在一个线程中改变两次属性。那么，我们的渲染线程可能最终会使用有旧颜色值的新内容，我们得到一个奇怪的组合。这就是为什么Core Data在一个线程或队列中绑定模型对象。</p>

<p>对于这个问题没有一个统一标准的解决方案。使用不可变的模型是一个解决方案，但它有它自己的问题。另一种方法是限制在主线程或一个特定的队列更改现有对象，而在工作线程中使用之前生成的副本。我推荐Jonathan Sterling在<Lightweight Immutability in Objective-C>文章中为解决这个问题更多的想法。</p>

<p>简单的解决方法是使用<code>@synchronize</code>。其他的是非常，非常有可能让你陷入困境。更聪明的人一次又一次地在其他方法上失败了。</p>

<h3>实用的线程安全设计</h3>

<p>在试图做线程安全之前，认真考虑是否是必要的。请确保它不是过早的优化。如果它像是一个配置类，考虑线程安全是没有意义的。更好的方法是抛出一些断言来确保它的正确使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">PSPDFAssertIfNotMainThread</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSAssert</span><span class="p">(</span><span class="n">NSThread</span><span class="p">.</span><span class="n">isMainThread</span><span class="p">,</span>
</span><span class='line'>      <span class="s">@&quot;Error: Method needs to be called on the main thread. %@&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="p">[</span><span class="n">NSThread</span> <span class="n">callStackSymbols</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在肯定有线程安全的代码，一个很好的例子就是缓存类。一个好的方法是使用一个并行dispatch_queue为读/写锁，以最大限度地提高性能，并尝试只锁定那些真正需要的地方。一旦你开始使用多个队列用于锁定不同部位，事情将很快变得棘手。</p>

<p>有时候，你也可以重写你的代码，使特殊的锁不是必需的。考虑这个代码片段，是一个多播委托的形式。 （在许多情况下，使用NSNotifications会更好，但也有有效的多路广播委托用例。）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// header</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableSet</span> <span class="o">*</span><span class="n">delegates</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// in init</span>
</span><span class='line'><span class="n">_delegateQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">&quot;com.PSPDFKit.cacheDelegateQueue&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">PSPDFCacheDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">delegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">_delegateQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="nl">addObject:</span><span class="n">delegate</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeAllDelegates</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">_delegateQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="n">removeAllObjects</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">callDelegateForX</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">_delegateQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">PSPDFCacheDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Call delegate</span>
</span><span class='line'>        <span class="p">}];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>除非<code>addDelegate:</code>或<code>removeDelegate:</code>每秒被调用上千次，否则下面是更简洁的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// header</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">atomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="n">NSSet</span> <span class="o">*</span><span class="n">delegates</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addDelegate:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">PSPDFCacheDelegate</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">delegate</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">@synchronized</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="nl">setByAddingObject:</span><span class="n">delegate</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">removeAllDelegates</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">callDelegateForX</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegates</span> <span class="nl">enumerateObjectsUsingBlock:</span><span class="o">^</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">PSPDFCacheDelegate</span><span class="o">&gt;</span> <span class="n">delegate</span><span class="p">,</span> <span class="n">NSUInteger</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Call delegate</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这个例子有点儿认为构造的，它可以简单的局限于在主线程更改。但对于许多数据结构，在修改方法中创建不可变的副本是值得的，让广大的应用程序逻辑并不需要处理过多的锁定。注意，我们仍然要在<code>addDelegate:</code>申请锁，否则如果委托对象被来自不同的线程同时调用，它可能会迷失。</p>

<h1>GCD的陷阱</h1>

<p>对于大部分的锁定需求，GCD是完美的。这很简单，很快速，并且它的基于块的API使得它更难偶然做出不平衡锁。不过，也有不少缺陷，我们将要在这里探索其中一些。</p>

<h3>使用GCD作为递归锁</h3>

<p>GCD是一个队列来序列化访问共享资源。这可以被用于锁定，但它比<code>@synchronized</code>大不相同。 GCD队列是不可重入的 &ndash; 这将打破队列特性。许多人试图使用<code>dispatch_get_current_queue()</code>来作为替代方案，这是一个坏主意。Apple在iOS6中废弃此方法自然有它的原因。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// This is a bad idea.</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="nf">pst_dispatch_sync_reentrant</span><span class="p">(</span><span class="n">dispatch_queue_t</span> <span class="n">queue</span><span class="p">,</span>
</span><span class='line'>  <span class="n">dispatch_block_t</span> <span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">dispatch_get_current_queue</span><span class="p">()</span> <span class="o">==</span> <span class="n">queue</span> <span class="o">?</span> <span class="n">block</span><span class="p">()</span>
</span><span class='line'>                                          <span class="o">:</span> <span class="n">dispatch_sync</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">block</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>测试当前队列简单的解决方案可能起作用，但当你的代码变得更加复杂的时候，你可能会在同一时间对多个队列上锁，它会失败。一旦你是这种情况，你几乎肯定会遇到死锁。当然，人们可以使用<code>dispatch_get_specific()</code>，它会遍历整个队列的层次结构来测试特定的队列。对于您将不得不编写应用此元数据的自定义队列的构造函数。不要走那条路，很多使用情况下，NSRecursiveLock是更好的解决方案。</p>

<h3>dispatch_async的固定时序问题</h3>

<p>在UIKit中有一些时序问题？大多数时候，这将是完美的“修复”：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Some UIKit call that had timing issues but works fine </span>
</span><span class='line'>    <span class="c1">// in the next runloop.</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">updatePopoverSize</span><span class="p">];</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>相信我，不要这样做。这将在以后缠着你因为你的应用程序变得越来越大。这是超级难调试，并因为“时序问题”当你需要调度越来越多，事情很快会土崩瓦解。看你的代码，找到适当调用的位置（例如viewWillAppear而不是viewDidLoad中）。在我的代码库仍然有一些黑客方式，但大部分都会被适当的记录并且提交问题。</p>

<p>请记住，这真不是GCD特有的，但它是一个常见的反模式，只是GCD很容易做到。你可以使用同样的才智<code>performSelector:afterDelay:</code>，其中下一个runloop的延迟是0.f。</p>

<h3>在性能关键代码中使用混合dispatch_sync和dispatch_async</h3>

<p>那个花了我一段时间才弄清楚。在PSPDFKit中有一个使用LRU列表来跟踪图像访问的缓存类。当你通过页面滚动，它会被调用很多次。最初的实现中对于可用的访问使用dispatch_sync，用dispatch_async来更新LRU位置。这导致帧速率远远低于每秒60帧的目标。</p>

<p>当你的应用程序中运行的其他代码阻止GCD的线程，它可能需要一段时间，直到调度管理器发现一个线程来执行dispatch_async代码 &ndash; 在那之前，你的同步调用将被阻塞。即使，在这个例子中，在异步情况下执行的顺序并不重要，没有简单的方法来告诉给GCD 。读/写锁在这里不会有任何帮助，因为异步流程非常肯定需要执行一个写屏障，在这期间你的所有读操作都会被锁定。教训：如果滥用， dispatch_async可以是昂贵的。使用它来锁操作要非常小心。</p>

<h3>使用dispatch_async来调度内存密集型操作</h3>

<p>我们已经谈了很多关于NSOperations ，而且使用更高层的API通常是一个好主意。如果你处理的是内存密集型操作的工作块，这是尤其如此。</p>

<p>在旧版本的PSPDFKit中，我用了一个GCD队列来调度写缓存JPG图像到磁盘。当视网膜的iPad出来了，这开始引起麻烦。分辨率加倍，比起渲染图像，对图像数据进行编码需要更长的时间。因此，操作堆积在队列中，当系统繁忙它可能会因为内存耗尽而崩溃。</p>

<p>没有办法来看到有多少操作在排队里（除非你手动添加代码来追踪这一点） ，而且也没有内置的方式来取消操作万一收到内存不足的通知。切换到NSOperations使代码更加可调试，并允许这一切都无需编写手动管理代码。</p>

<p>当然也有一些注意事项，例如你不能在你的NSOperationQueue上设置一个目标队列（如为节流的I/O而<code>DISPATCH_QUEUE_PRIORITY_BACKGROUND</code> ） 。但是，这是一个为可调试性付出的很小的代价，也防止你陷入类似问题，如优先级反转。我甚至建议使用漂亮的NSBlockOperation API，并建议NSOperation的真正子类，包括描述的实现。这是更多的工作，但后来，有一个方法出奇的有用是打印所有运行/挂起的操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core data/MagicalRecord concurrency reseach]]></title>
    <link href="http://imsg.github.io/blog/2013/11/26/core-data-slash-magicalrecord-concurrency-reseach/"/>
    <updated>2013-11-26T09:17:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/26/core-data-slash-magicalrecord-concurrency-reseach</id>
    <content type="html"><![CDATA[<h3>Core data research</h3>

<ul>
<li>每个线程必须有自己的NSManagedObjectContext</li>
<li>NSManagedObjects不是线程安全的，但是NSManagedObjectIDs是线程安全的</li>
<li>如果在background保存，则需要通过core data Notification将changes同步到其他contexts</li>
</ul>


<!--more-->


<p><img src="http://imsg.github.com/images/2013/core-data-stack-complex.png" alt="CORE DATA STACK" /></p>

<p>参考：<br/>
<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/CoreData/Articles/cdConcurrency.html">Concurrency with Core Data</a><br/>
<a href="http://www.objc.io/issue-4/core-data-overview.html">Core Data Overview</a></p>

<h3>How MagicalRecord resolve multi-threading concurrency issue</h3>

<p>以下为异步保存的code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">...;</span>
</span><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">saveWithBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">localContext</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Person</span> <span class="o">*</span><span class="n">localPerson</span> <span class="o">=</span> <span class="p">[</span><span class="n">person</span> <span class="nl">MR_inContext:</span><span class="n">localContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">localPerson</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="s">@&quot;John&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">localPerson</span><span class="p">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="s">@&quot;Appleseed&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">everyoneInTheDepartment</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">findAll</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如以上例子，在block里的save操作不会在main thread里，以独立的NSManagedObjectContext来工作。任务完成后，completion block将会被main thread调用，可以安全的更新UI部分。
操作对象NSManagedObject是通过NSManagedObjectID来得到的，在当前context中安全使用。</p>

<h3>saveWithBlock如何工作</h3>

<ul>
<li>创建一个NSPrivateQueueConcurrencyType类型的NSManagedObjectContext，parentConext为rootSavingContext</li>
<li>设置notification</li>
<li>回调block，返回新建立的context</li>
<li>如果有任何改动，保存当前context</li>
<li>rootSavingContext同样会被保存</li>
<li>Main thread的default context将会通过notification机制merge此改动</li>
<li>main thread中回调completion，返回是否成功和error code</li>
</ul>


<p>参考：<br/>
<a href="http://www.cimgf.com/2011/05/04/core-data-and-threads-without-the-headache/">CORE DATA AND THREADS, WITHOUT THE HEADACHE</a><br/>
<a href="https://github.com/magicalpanda/MagicalRecord/blob/release/2.2/Docs/Threads.md">Performing Core Data operations on Threads</a></p>

<h3>Conclusion</h3>

<p>MagicalRecord非常好的解决了core data多线程并发问题，我们只需要使用好MagicalRecord就能解决UI界面freeze等的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set toolbar items programmably]]></title>
    <link href="http://imsg.github.io/blog/2013/11/22/set-toolbar-items-programmably/"/>
    <updated>2013-11-22T12:17:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/22/set-toolbar-items-programmably</id>
    <content type="html"><![CDATA[<p>今天在做动态设置UIToolbar中的items的时候发现一个问题，要求是在UITableView在editing状态和非editing状态下切换toolbar的items。</p>

<p>以下是之前实现的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// toolbar</span>
</span><span class='line'><span class="n">UIBarButtonItem</span> <span class="o">*</span><span class="n">spaceItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBarButtonSystemItem:</span><span class="n">UIBarButtonSystemItemFlexibleSpace</span> <span class="nl">target:</span><span class="nb">nil</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">toolbar</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">markButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">moveButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">trashButton</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>在此代码运行的时候，如果当前的view controller已经不是代码的view controller时，这段代码依然会执行，从而把当前view controller的toolbar给更新了，导致toolbar乱了。</p>

<p>查了一下UIViewController的API，发现其自带设置toolbar item的方法：<code>- (void)setToolbarItems:(NSArray *)toolbarItems animated:(BOOL)animated</code></p>

<p>以下为修改后的代码，只在代码所属的UIViewController中设置toolbar items。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// toolbar</span>
</span><span class='line'><span class="n">UIBarButtonItem</span> <span class="o">*</span><span class="n">spaceItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBarButtonSystemItem:</span><span class="n">UIBarButtonSystemItemFlexibleSpace</span> <span class="nl">target:</span><span class="nb">nil</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setToolbarItems:</span><span class="err">@</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">markButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">moveButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">trashButton</span><span class="p">]</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
