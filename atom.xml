<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I'm Anson]]></title>
  <link href="http://imsg.github.io/atom.xml" rel="self"/>
  <link href="http://imsg.github.io/"/>
  <updated>2013-12-01T23:09:13+08:00</updated>
  <id>http://imsg.github.io/</id>
  <author>
    <name><![CDATA[Anson Zhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thread-Safe Class Design]]></title>
    <link href="http://imsg.github.io/blog/2013/11/28/thread-safe-class-design/"/>
    <updated>2013-11-28T22:39:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/28/thread-safe-class-design</id>
    <content type="html"><![CDATA[<p>翻译自<a href="http://www.objc.io/issue-2/thread-safe-class-design.html">Thread-Safe Class Design</a></p>

<h1>线程安全类的设计</h1>

<p>此文章将侧重于编写线程安全类和使用Grand Central Displatch(GCD)时的实用的技巧，设计模式，以及反模式。</p>

<h1>线程安全</h1>

<h3>Apple的框架</h3>

<p>首先让我们来看一下Apple的框架。一般情况下，除非提前声明，否则大多数类默认不是线程安全的。一些是我们所期望的，但是另一些却会相当有趣。</p>

<p>其中甚至有经验的iOS/Mac开发人员常会犯的错误是在后台线程中访问部分UIKit/AppKit。最容易犯的错误是在后台线程中对property赋值，比如图片，因为他们的内容是在后台从网络上获取的。Apple的代码是性能优化过的，如果你从不同线程去改动property，它是不会警告你的。</p>

<p>例如图片这种情况，一个常见的问题是你的改动会产生延迟。但是如果两个线程同时设置图片，很可能你的程序将直接崩溃，因为当前设置的图片可能会被释放两次。由于这是和时机相关的，因此崩溃通常发生在客户使用时，而并不是在开发过程中。</p>

<p>虽然没有官方的工具来发现这样的错误，但是有一些技巧可以避免这种错误发生。<a href="https://gist.github.com/steipete/5664345">The UIKit Main Thread Guard</a>是一小段代码，可以修补任何调用UIView的setNeedsLayout和setNeedsDisplay，以及在发送调用之前检查是否执行在主线程。由于这两种方法被许多UIKit的setters方法调用（包括图片），这将会捕获许多线程相关的错误。虽然这个不使用私有API，但是我们不建议在产品程序中使用，而是最好在开发过程是使用。</p>

<p>UIKit非线程安全是Apple有意的设计决定。从性能方面来说线程安全没有太多好处，它实际上会使很多事情变慢。而事实上UIKit和主线程捆绑使它很容易编写并发程序和使用UIKit。你所需要做的就是确保总是在主线程上调用UIKit。</p>

<h3>为什么UIKit不是线程安全的？</h3>

<p>像UIKit这样大的框架上确保线程安全是一个重大的任务，会带来巨大的成本。改变非原子property为原子property只是所需要改变的一小部分。通常你想要一次改变多个property，然后才能看到更改的结果。对于这一点，Apple不得不暴露一个方法，像CoreData的<code>performBlock:</code>和同步的方法<code>performBlockAndWait:</code>。如果你考虑大多数调用UIKit类是有关配置(configuration)，使他们线程安全更没有意义。</p>

<p>然而，即使调用不是关于配置(configuration)来共享内部状态，因此它们不是线程安全的。如果你已经写回到黑暗时代iOS3.2及以前的应用程序，你一定经历过当准备背景图像时使用<code>NSString</code>的<code>drawInRect:withFont:</code>随时崩溃。值得庆幸的是随着iOS4的到来，Apple提供了大部分绘图的方法和类，例如<code>UIColor</code>和<code>UIFont</code>在后台线程中的使用。</p>

<p>不幸的是，Apple的文档目前还缺乏有关线程安全的主题。他们建议只在主线程访问，甚至连绘画方法他们都不能保证线程安全。所以阅读iOS的版本说明总是一个好主意。</p>

<p>在大多数情况下，UIKit类只应该在程序的主线程使用。无论是从<code>UIResponder</code>派生的类，还是那些涉及以任何方式操作你的应用程序的用户界面。</p>

<h3>解除分配问题</h3>

<p>另一个在后台使用UIKit对象的风险是“解除分配问题”。Apple在TN2109里概括了这个问题，并提出了多种解决方案。这个问题是UI对象应该在主线程中释放，因为一部分对象有可能在dealloc中对视图层次结构进行更改。正如我们所知，这种对UIKit的调用需要发生在主线程上。</p>

<p>由于它常见于次线程，操作或块保留调用者，这很容易出错，并且很难找到并修复。这也是在AFNetworking中长期存在的一个bug，只是因为不是很多人知道这个问题，照例，显然它很罕见，并且很难重现崩溃。在异步块操作里一贯使用<code>__weak</code>和不访问ivars会有所帮助。</p>

<h3>集合类</h3>

<p>Apple有一个很好的概述文档，对iOS和Mac上列出线程安全最常见的基础类。一般情况下，不可变类，像NSArray是线程安全的，而它们的可变的变体，像NSMutableArray则不是。事实上，当在一个队列中序列化的访问时，是可以在不同线程中使用它们的。请记住，方法可能返回一个集合对象的可变变体，即使它们生命它们的返回类型是不可变的。好的做法是写一些像<code>return [array copy]</code>来确保返回的对象实际上是不可变的。</p>

<p>不同于像Java语言，Foundation框架不提供框架外的线程安全的集合类。其实这是非常合理的，因为在大多数情况下，你想在更高层使用你的锁去避免过多的锁操作。一个值得注意的例外是缓存，其中一个可变的字典可能会保存不变的数据-在这里Apple在iOS4中增加了NSCache，它不仅能锁定访问，还可以在低内存情况下清除它的内容。</p>

<p>这就是说，在你的程序中，这也许是有效的情况，其中一个线程安全的可变的字典可以很轻便的。而这要归功于类簇(class cluster)的解决方案，它可以很容易的写一个。</p>

<p>未完待续。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core data/MagicalRecord concurrency reseach]]></title>
    <link href="http://imsg.github.io/blog/2013/11/26/core-data-slash-magicalrecord-concurrency-reseach/"/>
    <updated>2013-11-26T09:17:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/26/core-data-slash-magicalrecord-concurrency-reseach</id>
    <content type="html"><![CDATA[<h3>Core data research</h3>

<ul>
<li>每个线程必须有自己的NSManagedObjectContext</li>
<li>NSManagedObjects不是线程安全的，但是NSManagedObjectIDs是线程安全的</li>
<li>如果在background保存，则需要通过core data Notification将changes同步到其他contexts</li>
</ul>


<p><img src="http://imsg.github.com/images/2013/core-data-stack-complex.png" alt="CORE DATA STACK" /></p>

<p>参考：<br/>
<a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/CoreData/Articles/cdConcurrency.html">Concurrency with Core Data</a><br/>
<a href="http://www.objc.io/issue-4/core-data-overview.html">Core Data Overview</a></p>

<h3>How MagicalRecord resolve multi-threading concurrency issue</h3>

<p>以下为异步保存的code</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Person</span> <span class="o">*</span><span class="n">person</span> <span class="o">=</span> <span class="p">...;</span>
</span><span class='line'><span class="p">[</span><span class="n">MagicalRecord</span> <span class="nl">saveWithBlock:</span><span class="o">^</span><span class="p">(</span><span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">localContext</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Person</span> <span class="o">*</span><span class="n">localPerson</span> <span class="o">=</span> <span class="p">[</span><span class="n">person</span> <span class="nl">MR_inContext:</span><span class="n">localContext</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">localPerson</span><span class="p">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="s">@&quot;John&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">localPerson</span><span class="p">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="s">@&quot;Appleseed&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">success</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">self</span><span class="p">.</span><span class="n">everyoneInTheDepartment</span> <span class="o">=</span> <span class="p">[</span><span class="n">Person</span> <span class="n">findAll</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>


<p>如以上例子，在block里的save操作不会在main thread里，以独立的NSManagedObjectContext来工作。任务完成后，completion block将会被main thread调用，可以安全的更新UI部分。
操作对象NSManagedObject是通过NSManagedObjectID来得到的，在当前context中安全使用。</p>

<h3>saveWithBlock如何工作</h3>

<ul>
<li>创建一个NSPrivateQueueConcurrencyType类型的NSManagedObjectContext，parentConext为rootSavingContext</li>
<li>设置notification</li>
<li>回调block，返回新建立的context</li>
<li>如果有任何改动，保存当前context</li>
<li>rootSavingContext同样会被保存</li>
<li>Main thread的default context将会通过notification机制merge此改动</li>
<li>main thread中回调completion，返回是否成功和error code</li>
</ul>


<p>参考：<br/>
<a href="http://www.cimgf.com/2011/05/04/core-data-and-threads-without-the-headache/">CORE DATA AND THREADS, WITHOUT THE HEADACHE</a><br/>
<a href="https://github.com/magicalpanda/MagicalRecord/blob/release/2.2/Docs/Threads.md">Performing Core Data operations on Threads</a></p>

<h3>Conclusion</h3>

<p>MagicalRecord非常好的解决了core data多线程并发问题，我们只需要使用好MagicalRecord就能解决UI界面freeze等的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set toolbar items programmably]]></title>
    <link href="http://imsg.github.io/blog/2013/11/22/set-toolbar-items-programmably/"/>
    <updated>2013-11-22T12:17:00+08:00</updated>
    <id>http://imsg.github.io/blog/2013/11/22/set-toolbar-items-programmably</id>
    <content type="html"><![CDATA[<p>今天在做动态设置UIToolbar中的items的时候发现一个问题，要求是在UITableView在editing状态和非editing状态下切换toolbar的items。</p>

<p>以下是之前实现的方式</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// toolbar</span>
</span><span class='line'><span class="n">UIBarButtonItem</span> <span class="o">*</span><span class="n">spaceItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBarButtonSystemItem:</span><span class="n">UIBarButtonSystemItemFlexibleSpace</span> <span class="nl">target:</span><span class="nb">nil</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span><span class="p">.</span><span class="n">toolbar</span><span class="p">.</span><span class="n">items</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">markButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">moveButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">trashButton</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在此代码运行的时候，如果当前的view controller已经不是代码的view controller时，这段代码依然会执行，从而把当前view controller的toolbar给更新了，导致toolbar乱了。</p>

<p>查了一下UIViewController的API，发现其自带设置toolbar item的方法：<code>- (void)setToolbarItems:(NSArray *)toolbarItems animated:(BOOL)animated</code></p>

<p>以下为修改后的代码，只在代码所属的UIViewController中设置toolbar items。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// toolbar</span>
</span><span class='line'><span class="n">UIBarButtonItem</span> <span class="o">*</span><span class="n">spaceItem</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIBarButtonItem</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithBarButtonSystemItem:</span><span class="n">UIBarButtonSystemItemFlexibleSpace</span> <span class="nl">target:</span><span class="nb">nil</span> <span class="nl">action:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="nl">setToolbarItems:</span><span class="err">@</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">markButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">moveButton</span><span class="p">,</span> <span class="n">spaceItem</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">trashButton</span><span class="p">]</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
